/**
 * Hashgraph Zoo API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: craig.drabik@txmq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Animal } from '../model/animal';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
import { ExoDistributedEndpointService } from '../../app/exo/exo-distributed-endpoint.service';


@Injectable()
export class DefaultService {

    private apiRootPath:string = '/HashgraphZoo/1.0.0';
    private jaxBasePath = 'http://localhost:8080' + this.apiRootPath;
    
    public useHashgraph:boolean = true;

    /**
     * Hook for wiring in the distributed endpoint service
     */
    protected get basePath():string {
        if (!this.useHashgraph) {
            return this.jaxBasePath; 
        } else {
            return this.distributedEndpoitnService.getBaseUrl();
        }
    }
    
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, 
                protected distributedEndpoitnService: ExoDistributedEndpointService,
                @Optional()@Inject(BASE_PATH) basePath: string, 
                @Optional() configuration: Configuration) {
        if (basePath) {
            //TODO:
            //this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            //TODO
            //this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * adds an animal to the zoo
     * Adds an animal to the zoo
     * @param animal Animal to add
     */
    public addAnimal(animal?: Animal): Observable<{}> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/zoo/animals`,
            animal,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Returns all the animals in the zoo
     * Returns all of the animals in the zoo 
     */
    public getZoo(): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/zoo`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

}
