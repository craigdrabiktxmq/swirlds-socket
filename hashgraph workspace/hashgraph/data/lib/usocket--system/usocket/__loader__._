"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/local-projects/usocket-0.6.1/usocket.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-15284 #:ENVIRONMENT-15285 #:WHOLE-15316 #:ENVIRONMENT-15317 #:WHOLE-15345 #:ENVIRONMENT-15346 #:WHOLE-15373 #:ENVIRONMENT-15374 #:WAIT-LIST- #:G15397 #:G15398 #:G15399 #:G15434 #:G15479 #:G15531 #:G15575 #:G15627 #:G15672 #:WHOLE-15969 #:ENVIRONMENT-15970 #:WHOLE-16000 #:ENVIRONMENT-16001 #:WHOLE-16032 #:ENVIRONMENT-16033 #:WHOLE-16063 #:ENVIRONMENT-16064))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.usocket_tmpMZSRW82I"))
(SYSTEM:%IN-PACKAGE "USOCKET")
(DEFPARAMETER *WILDCARD-HOST* #(#1=0 #1#  #1#  #1# ) "Hostname to pass when all interfaces in the current system are to be bound.")
(DEFPARAMETER *AUTO-PORT* 0 "Port number to pass when an auto-assigned port number is wanted.")
(DEFCONSTANT +MAX-DATAGRAM-PACKET-SIZE+ 65507 "The theoretical maximum amount of data in a UDP datagram.

The IPv4 UDP packets have a 16-bit length constraint, and IP+UDP header has 28-byte.

IP_MAXPACKET = 65535,       /* netinet/ip.h */
sizeof(struct ip) = 20,     /* netinet/ip.h */
sizeof(struct udphdr) = 8,  /* netinet/udp.h */

65535 - 20 - 8 = 65507

(But for UDP broadcast, the maximum message size is limited by the MTU size of the underlying link)")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 0))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 3))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 4))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 6))
(SYSTEM:FSET 'USOCKET-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 7) 3705 '(SOCKET) 
#1=NIL)
(SYSTEM:FSET 'STREAM-USOCKET-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 8) 
3759 '(SOCKET) #1=NIL)
(SYSTEM:FSET 'STREAM-SERVER-USOCKET-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
9) 3827 '(SOCKET) #1=NIL)
(SYSTEM:FSET 'DATAGRAM-USOCKET-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
10) 3909 '(SOCKET) #1=NIL)
(SYSTEM:FSET 'MAKE-SOCKET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 11) 3981 
'(&KEY SOCKET) "Create a usocket socket type from implementation specific socket.")
(SYSTEM:FSET 'MAKE-STREAM-SOCKET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
12) 4176 '(&KEY SOCKET STREAM) "Create a usocket socket type from implementation specific socket
and stream objects.

Sockets returned should be closed using the `socket-close' method or
by closing the stream associated with the socket.
")
(SYSTEM:FSET 'MAKE-STREAM-SERVER-SOCKET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
13) 4644 '(SOCKET &KEY (ELEMENT-TYPE 'CHARACTER)) "Create a usocket-server socket type from an
implementation-specific socket object.

The returned value is a subtype of `stream-server-usocket'.
")
(SYSTEM:FSET 'MAKE-DATAGRAM-SOCKET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
14) 5166 '(SOCKET &KEY CONNECTED-P) #1=NIL)
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 15))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 16))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 17))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 18))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 19))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 20))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 21))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 22))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 23))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 24))
(SYSTEM:FSET '#1=WITH-CONNECTED-SOCKET (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 25)) 6959 '((VAR SOCKET) &BODY BODY))
(SYSTEM:FSET '#1=WITH-CLIENT-SOCKET (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 26)) 7369 '((SOCKET-VAR STREAM-VAR &REST SOCKET-CONNECT-ARGS) 
&BODY BODY))
(SYSTEM:FSET '#1=WITH-SERVER-SOCKET (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 27)) 7903 '((VAR SERVER-SOCKET) &BODY BODY))
(SYSTEM:FSET '#1=WITH-SOCKET-LISTENER (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 28)) 8205 '((SOCKET-VAR &REST SOCKET-LISTEN-ARGS) &BODY BODY))
(SYSTEM:COMPILER-DEFSTRUCT 'WAIT-LIST :CONC-NAME '#8? :DEFAULT-CONSTRUCTOR '#1=%MAKE-WAIT-LIST 
:CONSTRUCTORS '((#1#  #2=NIL)) :COPIER 'COPY-WAIT-LIST :PREDICATE '"WAIT-LIST-P" 
:DIRECT-SLOTS '(#3=#(#4=SYSTEM::DEFSTRUCT-SLOT-DESCRIPTION %WAIT 0 WAIT-LIST-%WAIT
 #2#  #5=T #2# ) #6=#(#4#  WAITERS 1 WAIT-LIST-WAITERS #2#  #5#  #2# ) #7=#(#4#  MAP
 2 WAIT-LIST-MAP #2#  #5#  #2# )) :SLOTS '(#3#  #6#  #7# ) :INHERITED-ACCESSORS '#2#  
:DOCUMENTATION '#2# )
(SYSTEM:FSET '%MAKE-WAIT-LIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 29) 
8522 '(&KEY ((:%WAIT #9?) #1=NIL) ((:WAITERS #10?) #1# ) ((:MAP #11?) #1# )) #1# )
(SYSTEM:FSET 'WAIT-LIST-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 30) 8522 
'(SYSTEM::OBJECT) #1=NIL)
(PROCLAIM '(FTYPE (FUNCTION * T) WAIT-LIST-%WAIT))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 31))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 32))
(SYSTEM:PUT 'WAIT-LIST-%WAIT 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
0 'WAIT-LIST))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 34))
(PROCLAIM '(FTYPE (FUNCTION * T) WAIT-LIST-WAITERS))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 36))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 37))
(SYSTEM:PUT 'WAIT-LIST-WAITERS 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
1 'WAIT-LIST))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 39))
(PROCLAIM '(FTYPE (FUNCTION * T) WAIT-LIST-MAP))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 41))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 42))
(SYSTEM:PUT 'WAIT-LIST-MAP 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 2 
'WAIT-LIST))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 44))
(SYSTEM::%SET-FDEFINITION 'COPY-WAIT-LIST (FUNCTION COPY-STRUCTURE))
(SYSTEM:FSET 'MAKE-WAIT-LIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 46) 
8661 '(WAITERS) #1=NIL)
(SYSTEM:FSET 'ADD-WAITER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 47) 8986 
'(WAIT-LIST INPUT) #1=NIL)
(SYSTEM:FSET 'REMOVE-WAITER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 48) 9206 
'(WAIT-LIST INPUT) #1=NIL)
(SYSTEM:FSET 'REMOVE-ALL-WAITERS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
49) 9457 '(WAIT-LIST) #1=NIL)
(SYSTEM:FSET 'WAIT-FOR-INPUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 50) 
9666 '(SOCKET-OR-SOCKETS &KEY TIMEOUT READY-ONLY) "Waits for one or more streams to become ready for reading from
the socket.  When `timeout' (a non-negative real number) is
specified, wait `timeout' seconds, or wait indefinitely when
it isn't specified.  A `timeout' value of 0 (zero) means polling.

Returns two values: the first value is the list of streams which
are readable (or in case of server streams acceptable).  NIL may
be returned for this value either when waiting timed out or when
it was interrupted (EINTR).  The second value is a real number
indicating the time remaining within the timeout period or NIL if
none.

Without the READY-ONLY arg, WAIT-FOR-INPUT will return all sockets in
the original list you passed it. This prevents a new list from being
consed up. Some users of USOCKET were reluctant to use it if it
wouldn't behave that way, expecting it to cost significant performance
to do the associated garbage collection.

Without the READY-ONLY arg, you need to check the socket STATE slot for
the values documented in usocket.lisp in the usocket class.")
(SYSTEM:FSET 'INTEGER-TO-OCTET-BUFFER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
51) 12429 '(INTEGER BUFFER OCTETS &KEY (START 0)) #1=NIL)
(SYSTEM:FSET 'OCTET-BUFFER-TO-INTEGER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
52) 12701 '(BUFFER OCTETS &KEY (START 0)) #1=NIL)
(SYSTEM:FSET '#1=PORT-TO-OCTET-BUFFER (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 53)) 12976 '(PORT BUFFER &KEY (START 0)))
(SYSTEM:FSET '#1=IP-TO-OCTET-BUFFER (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 54)) 13097 '(IP BUFFER &KEY (START 0)))
(SYSTEM:FSET '#1=PORT-FROM-OCTET-BUFFER (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 55)) 13230 '(BUFFER &KEY (START 0)))
(SYSTEM:FSET '#1=IP-FROM-OCTET-BUFFER (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 56)) 13342 '(BUFFER &KEY (START 0)))
(SYSTEM:FSET 'LIST-OF-STRINGS-TO-INTEGERS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
57) 13452 '(LIST) "Take a list of strings and return a new list of integers (from
parse-integer) on each of the string elements.")
(SYSTEM:FSET 'IP-ADDRESS-STRING-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
58) 13767 '(STRING) "Return a true value if the given string could be an IP address.")
(SYSTEM:FSET 'HBO-TO-DOTTED-QUAD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
60) 13981 '(INTEGER) "Host-byte-order integer to dotted-quad string conversion utility.")
(SYSTEM:FSET 'HBO-TO-VECTOR-QUAD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
62) 14316 '(INTEGER) "Host-byte-order integer to dotted-quad string conversion utility.")
(SYSTEM:FSET 'VECTOR-QUAD-TO-DOTTED-QUAD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
63) 14633 '(VECTOR) #1=NIL)
(SYSTEM:FSET 'DOTTED-QUAD-TO-VECTOR-QUAD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
65) 14811 '(STRING) #1=NIL)
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 66))
(MOP::ENSURE-METHOD 'HOST-BYTE-ORDER :LAMBDA-LIST '(#1=STRING) :QUALIFIERS '#2=NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST '#1# )) :DOCUMENTATION "Convert a string, such as 192.168.1.1, to host-byte-order,
such as 3232235777." :FUNCTION (#3=SYSTEM::GET-FASL-FUNCTION #4=SYSTEM:*FASL-LOADER* 
67) :FAST-FUNCTION (#3#  #4#  68))
(MOP::ENSURE-METHOD 'HOST-BYTE-ORDER :LAMBDA-LIST '(#1=VECTOR) :QUALIFIERS '#2=NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST '#1# )) :DOCUMENTATION "Convert a vector, such as #(192 168 1 1), to host-byte-order, such as
3232235777." :FUNCTION (#3=SYSTEM::GET-FASL-FUNCTION #4=SYSTEM:*FASL-LOADER* 69) 
:FAST-FUNCTION (#3#  #4#  70))
(MOP::ENSURE-METHOD 'HOST-BYTE-ORDER :LAMBDA-LIST '(INT) :QUALIFIERS '#1=NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (LIST 'INTEGER)) :FUNCTION (#2=SYSTEM::GET-FASL-FUNCTION 
#3=SYSTEM:*FASL-LOADER* 71) :FAST-FUNCTION (#2#  #3#  72))
(SYSTEM:FSET 'HOST-TO-HOSTNAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 73) 
15642 '(HOST) "Translate a string or vector quad to a stringified hostname.")
(SYSTEM:FSET 'IP= (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 74) 15940 '(IP1 
IP2) #1=NIL)
(SYSTEM:FSET 'IP/= (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 75) 16338 '(IP1 
IP2) #1=NIL)
(SYSTEM:FSET 'GET-HOST-BY-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 76) 
16384 '(NAME) #1=NIL)
(SYSTEM:FSET 'GET-RANDOM-HOST-BY-NAME (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
77) 16507 '(NAME) #1=NIL)
(SYSTEM:FSET 'HOST-TO-VECTOR-QUAD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
78) 16649 '(HOST) "Translate a host specification (vector quad, dotted quad or domain name)
to a vector quad.")
(SYSTEM:FSET 'HOST-TO-HBO (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 79) 17189 
'(HOST) #1=NIL)
(SYSTEM:FSET 'SPLIT-TIMEOUT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 80) 17605 
'(TIMEOUT &OPTIONAL (FRACTIONAL 1000000)) "Split real value timeout into seconds and microseconds.
Optionally, a different fractional part can be specified.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 81))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 82))
