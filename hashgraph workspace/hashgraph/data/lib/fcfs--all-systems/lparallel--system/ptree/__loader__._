"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/lparallel-20131111-git/src/ptree.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:%%%%.NODE. #:G36351 #:G36352 #:G36353 #:G36354 #:G36355 #:G36356 #:G36357 #:G36406 #:G36451 #:G36503 #:G36548 #:G36600 #:G36645 #:G36696 #:G36741 #:G36793 #:G36839 #:G36891 #:G36937 #:G36989 #:G37034 #:WHOLE-37078 #:ENVIRONMENT-37079 #:LPARALLEL.PTREE #:G37103 #:G37104 #:G37133 #:G37134 #:G37163 #:G37164 #:%%%%.PTREE. #:G37621 #:G37622 #:G37623 #:G37624 #:G37672 #:G37718 #:G37770 #:G37815 #:G37867 #:G37913 #:G37964 #:G38009 #:WHOLE-38053 #:ENVIRONMENT-38054 #:LPARALLEL.PTREE #:G38078 #:G38079 #:G38108 #:G38109 #:WHOLE-38475 #:ENVIRONMENT-38476))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.ptree_tmpP1QVPN7W"))
(SYSTEM:%IN-PACKAGE "LPARALLEL.PTREE")
(COMMON-LISP:IMPORT '(LPARALLEL.KERNEL:KERNEL LPARALLEL.KERNEL::SUBMIT-RAW-TASK LPARALLEL.KERNEL::WITH-TASK-CONTEXT 
LPARALLEL.KERNEL::MAKE-TASK LPARALLEL.KERNEL::TASK-LAMBDA LPARALLEL.KERNEL::WRAPPED-ERROR 
LPARALLEL.KERNEL::WRAP-ERROR LPARALLEL.KERNEL::UNWRAP-RESULT))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 0))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1))
(MOP::ENSURE-METHOD 'PRINT-OBJECT :LAMBDA-LIST '(CONDITION STREAM) :QUALIFIERS '#1=NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'PTREE-REDEFINITION-ERROR 'T)) 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 2))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 8))
(MOP::ENSURE-METHOD 'PRINT-OBJECT :LAMBDA-LIST '(CONDITION STREAM) :QUALIFIERS '#1=NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'PTREE-UNDEFINED-FUNCTION-ERROR 
'T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 10))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 17))
(MOP::ENSURE-METHOD 'PRINT-OBJECT :LAMBDA-LIST '(CONDITION STREAM) :QUALIFIERS '#1=NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'PTREE-LAMBDA-LIST-KEYWORD-ERROR 
'T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 18))
(DEFCONSTANT +NO-RESULT+ 'NO-RESULT)
(SYSTEM:COMPILER-DEFSTRUCT '#1=NODE :CONC-NAME '#0? :DEFAULT-CONSTRUCTOR '#2=MAKE-NODE-INSTANCE 
:CONSTRUCTORS '((#2#  #3=NIL)) :COPIER 'COPY-NODE :PREDICATE '"NODE-P" :DIRECT-SLOTS 
'(#4=#(#5=SYSTEM::DEFSTRUCT-SLOT-DESCRIPTION #6=ID #7=0 %%%%.NODE.ID (ERROR "slot ~a in ~a not initialized" 
'#6#  '#1# ) #8=T #3# ) #9=#(#5#  #10=FUNCTION 1 %%%%.NODE.FUNCTION #3#  (OR #10#  
NULL) #3# ) #11=#(#5#  CHILDREN 2 %%%%.NODE.CHILDREN #3#  #12=LIST #3# ) #13=#(#5# 
 PARENTS 3 %%%%.NODE.PARENTS #3#  #12#  #3# ) #14=#(#5#  LOCK-LEVEL 4 %%%%.NODE.LOCK-LEVEL
 #7#  FIXNUM #3# ) #15=#(#5#  CHILDREN-DONE-P 5 %%%%.NODE.CHILDREN-DONE-P #3#  BOOLEAN
 #3# ) #16=#(#5#  RESULT 6 %%%%.NODE.RESULT +NO-RESULT+ #8#  #3# )) :SLOTS '(#4#  
#9#  #11#  #13#  #14#  #15#  #16# ) :INHERITED-ACCESSORS '#3#  :DOCUMENTATION '#3# )
(SYSTEM:FSET 'MAKE-NODE-INSTANCE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
24) 3280 '(&KEY ((:ID #1?) (ERROR "slot ~a in ~a not initialized" 'ID 'NODE)) ((:FUNCTION 
#2?) #1=NIL) ((:CHILDREN #3?) #1# ) ((:PARENTS #4?) #1# ) ((:LOCK-LEVEL #5?) 0) ((:CHILDREN-DONE-P 
#6?) #1# ) ((:RESULT #7?) +NO-RESULT+)) #1# )
(SYSTEM:FSET 'NODE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 25) 3280 '(SYSTEM::OBJECT) 
#1=NIL)
(PROCLAIM '(FTYPE (FUNCTION * T) %%%%.NODE.ID))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 26))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 27))
(SYSTEM:PUT '%%%%.NODE.ID 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 0 
'NODE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 29))
(PROCLAIM '(FTYPE (#1=FUNCTION * (OR #1#  NULL)) %%%%.NODE.FUNCTION))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 31))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 32))
(SYSTEM:PUT '%%%%.NODE.FUNCTION 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
1 'NODE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 34))
(PROCLAIM '(FTYPE (FUNCTION * LIST) %%%%.NODE.CHILDREN))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 36))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 37))
(SYSTEM:PUT '%%%%.NODE.CHILDREN 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
2 'NODE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 39))
(PROCLAIM '(FTYPE (FUNCTION * LIST) %%%%.NODE.PARENTS))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 41))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 42))
(SYSTEM:PUT '%%%%.NODE.PARENTS 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
3 'NODE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 44))
(PROCLAIM '(FTYPE (FUNCTION * FIXNUM) %%%%.NODE.LOCK-LEVEL))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 46))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 47))
(SYSTEM:PUT '%%%%.NODE.LOCK-LEVEL 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
4 'NODE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 49))
(PROCLAIM '(FTYPE (FUNCTION * BOOLEAN) %%%%.NODE.CHILDREN-DONE-P))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 51))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 52))
(SYSTEM:PUT '%%%%.NODE.CHILDREN-DONE-P 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
5 'NODE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 54))
(PROCLAIM '(FTYPE (FUNCTION * T) %%%%.NODE.RESULT))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 56))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 57))
(SYSTEM:PUT '%%%%.NODE.RESULT 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
6 'NODE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 59))
(SYSTEM::%SET-FDEFINITION 'COPY-NODE (FUNCTION COPY-STRUCTURE))
(SYSTEM:FSET '#1=WITH-NODE-SLOTS (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 61)) 3280 '(LPARALLEL.UTIL::SLOTS LPARALLEL.UTIL::INSTANCE &BODY 
LPARALLEL.UTIL::BODY))
(PROCLAIM '(FTYPE (FUNCTION (NODE) T) ID))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 62))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 63))
(PROCLAIM '(FTYPE (FUNCTION (NODE) FIXNUM) LOCK-LEVEL))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 65))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 66))
(PROCLAIM '(FTYPE (FUNCTION (NODE) T) RESULT))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 68))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 69))
(SYSTEM:FSET 'CLEAR-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 71) 3739 
'(NODE) #1=NIL)
(SYSTEM:FSET 'CLEAR-NODE-ERROR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 72) 
3910 '(NODE) #1=NIL)
(SYSTEM:FSET 'CHECK-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 73) 4131 
'(NODE) #1=NIL)
(PROCLAIM '(INLINE COMPUTEDP))
(PROCLAIM '(FTYPE (FUNCTION (NODE) (VALUES BOOLEAN &OPTIONAL)) COMPUTEDP))
(SETF (SYSTEM:INLINE-EXPANSION '#1=COMPUTEDP) '(LAMBDA (#2=NODE) (#3=DECLARE (OPTIMIZE 
(SPEED 3) (SAFETY #4=0) (DEBUG #4# ) (SPACE #4# ) (COMPILATION-SPEED #4# ))) (#3#  
(TYPE #2#  #2# )) (BLOCK #1#  (THE (VALUES BOOLEAN &OPTIONAL) (PROGN (NOT (EQ (RESULT 
#2# ) +NO-RESULT+)))))))
(SYSTEM:FSET 'COMPUTEDP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 74) 4334 
'(NODE) #1=NIL)
(PROCLAIM '(FTYPE (FUNCTION (NODE) (VALUES T &OPTIONAL)) COMPUTE-NODE))
(SYSTEM:FSET 'COMPUTE-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 75) 4456 
'(NODE) #1=NIL)
(PROCLAIM '(INLINE FREEP))
(PROCLAIM '(FTYPE (FUNCTION (NODE) (VALUES T &OPTIONAL)) FREEP))
(SETF (SYSTEM:INLINE-EXPANSION '#1=FREEP) '(LAMBDA (#2=NODE) (#3=DECLARE (OPTIMIZE 
(SPEED 3) (SAFETY #4=0) (DEBUG #4# ) (SPACE #4# ) (COMPILATION-SPEED #4# ))) (#3#  
(TYPE #2#  #2# )) (BLOCK #1#  (THE (VALUES T &OPTIONAL) (PROGN (ZEROP (LOCK-LEVEL 
#2# )))))))
(SYSTEM:FSET 'FREEP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 76) 5026 '(NODE) 
#1=NIL)
(PROCLAIM '(FTYPE (FUNCTION (NODE WRAPPED-ERROR) (VALUES NULL &OPTIONAL)) PROPAGATE-ERROR))
(SYSTEM:FSET 'PROPAGATE-ERROR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 77) 
5127 '(NODE ERROR-RESULT) #1=NIL)
(PROCLAIM '(FTYPE (FUNCTION (NODE) (VALUES NULL &OPTIONAL)) LOCK-NODE))
(SYSTEM:FSET 'LOCK-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 78) 5380 
'(NODE) #1=NIL)
(PROCLAIM '(FTYPE (FUNCTION (NODE) (VALUES NULL &OPTIONAL)) UNLOCK-NODE))
(SYSTEM:FSET 'UNLOCK-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 79) 5576 
'(NODE) #1=NIL)
(PROCLAIM '(INLINE CHILDREN-DONE-P))
(PROCLAIM '(FTYPE (FUNCTION (NODE) (VALUES BOOLEAN &OPTIONAL)) CHILDREN-DONE-P))
(#1=SETF (SYSTEM:INLINE-EXPANSION '#2=CHILDREN-DONE-P) '(LAMBDA (#3=NODE) (#4=DECLARE 
(OPTIMIZE (SPEED 3) (SAFETY #5=0) (DEBUG #5# ) (SPACE #5# ) (COMPILATION-SPEED #5# ))) 
(#4#  (TYPE #3#  #3# )) (BLOCK #2#  (THE (VALUES BOOLEAN &OPTIONAL) (#6=PROGN (WITH-NODE-SLOTS 
(#7=CHILDREN #2# ) #3#  (OR #2#  (NULL #7# ) (#6#  (DOLIST (#8=CHILD #7# ) (UNLESS 
(COMPUTEDP #8# ) (RETURN-FROM #2#  #9=NIL))) (#1#  #2#  T)))))))))
(SYSTEM:FSET 'CHILDREN-DONE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 80) 
5776 '(NODE) #1=NIL)
(DEFVAR *PTREE-NODE-KERNEL* #1=NIL "When non-nil, `*kernel*' is bound to this value during the call of
  a node function.")
(PROCLAIM '(FTYPE (FUNCTION (QUEUE NODE) (VALUES T &OPTIONAL)) MAKE-NODE-TASK))
(SYSTEM:FSET 'MAKE-NODE-TASK (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 81) 
6264 '(QUEUE NODE) #1=NIL)
(PROCLAIM '(FTYPE (FUNCTION (NODE QUEUE KERNEL) (VALUES NULL &OPTIONAL)) SUBMIT-NODE))
(SYSTEM:FSET 'SUBMIT-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 84) 6852 
'(NODE QUEUE KERNEL) #1=NIL)
(PROCLAIM '(FTYPE (FUNCTION (#1=NODE) (VALUES (OR #1#  NULL) &OPTIONAL)) FIND-NODE))
(SYSTEM:FSET 'FIND-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 85) 7040 
'(NODE) #1=NIL)
(SYSTEM:COMPILER-DEFSTRUCT 'PTREE :CONC-NAME '#31? :DEFAULT-CONSTRUCTOR '#1=MAKE-PTREE-INSTANCE 
:CONSTRUCTORS '((#1#  #2=NIL)) :COPIER 'COPY-PTREE :PREDICATE '"PTREE-P" :DIRECT-SLOTS 
'(#3=#(#4=SYSTEM::DEFSTRUCT-SLOT-DESCRIPTION NODES #5=0 %%%%.PTREE.NODES (MAKE-HASH-TABLE 
:TEST (FUNCTION EQL)) HASH-TABLE #2# ) #6=#(#4#  #7=QUEUE 1 %%%%.PTREE.QUEUE (MAKE-QUEUE)
 #7#  #2# ) #8=#(#4#  PENDING 2 %%%%.PTREE.PENDING #5#  INTEGER #2# ) #9=#(#4#  LOCK
 3 %%%%.PTREE.LOCK (MAKE-LOCK) T #2# )) :SLOTS '(#3#  #6#  #8#  #9# ) :INHERITED-ACCESSORS 
'#2#  :DOCUMENTATION '"A ptree is a computation represented by a tree together with
   functionality to execute the tree in parallel.")
(SYSTEM:FSET 'MAKE-PTREE-INSTANCE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
86) 7643 '(&KEY ((:NODES #32?) (MAKE-HASH-TABLE :TEST (FUNCTION EQL))) ((:QUEUE #33?) 
(MAKE-QUEUE)) ((:PENDING #34?) 0) ((:LOCK #35?) (MAKE-LOCK))) #1=NIL)
(SYSTEM:FSET 'PTREE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 87) 7643 '(SYSTEM::OBJECT) 
#1=NIL)
(PROCLAIM '(FTYPE (FUNCTION * HASH-TABLE) %%%%.PTREE.NODES))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 88))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 89))
(SYSTEM:PUT '%%%%.PTREE.NODES 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
0 'PTREE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 91))
(PROCLAIM '(FTYPE (FUNCTION * QUEUE) %%%%.PTREE.QUEUE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 93))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 94))
(SYSTEM:PUT '%%%%.PTREE.QUEUE 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
1 'PTREE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 96))
(PROCLAIM '(FTYPE (FUNCTION * INTEGER) %%%%.PTREE.PENDING))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 98))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 99))
(SYSTEM:PUT '%%%%.PTREE.PENDING 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
2 'PTREE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 101))
(PROCLAIM '(FTYPE (FUNCTION * T) %%%%.PTREE.LOCK))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 103))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 104))
(SYSTEM:PUT '%%%%.PTREE.LOCK 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
3 'PTREE))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 106))
(SYSTEM::%SET-FDEFINITION 'COPY-PTREE (FUNCTION COPY-STRUCTURE))
(SYSTEM:FSET '#1=WITH-PTREE-SLOTS (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 108)) 7643 '(LPARALLEL.UTIL::SLOTS LPARALLEL.UTIL::INSTANCE 
&BODY LPARALLEL.UTIL::BODY))
(PROCLAIM '(FTYPE (FUNCTION (PTREE) HASH-TABLE) NODES))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 109))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 110))
(PROCLAIM '(FTYPE (FUNCTION (PTREE) T) LOCK))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 112))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 113))
(SYSTEM:FSET 'MAKE-PTREE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 115) 8088 
'#1=NIL "Create a ptree instance.")
(PROCLAIM '(FTYPE (FUNCTION (#1=NODE PTREE KERNEL) (VALUES #1#  &OPTIONAL)) COMPUTE-PTREE))
(SYSTEM:FSET 'COMPUTE-PTREE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 116) 
8164 '(ROOT PTREE KERNEL) #1=NIL)
(SYSTEM:FSET 'WAIT-FOR-COMPUTE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 117) 
8877 '(PTREE) #1=NIL)
(SYSTEM:FSET 'EACH-NODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 118) 9032 
'(PTREE FN) #1=NIL)
(SYSTEM:FSET 'CHECK-PTREE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 120) 9184 
'(PTREE) "Verify that all nodes have been defined with an associated
function. If not, `ptree-undefined-function-error' is signaled.")
(SYSTEM:FSET 'CLEAR-PTREE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 121) 9409 
'(PTREE) "Clear all node results in `ptree', restoring the tree to its
uncomputed state.")
(SYSTEM:FSET 'CLEAR-PTREE-ERRORS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
122) 9619 '(PTREE) "Clear all error results in `ptree', allowing the computation to
resume from its latest pre-error state.")
(SYSTEM:FSET 'PTREE-FN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 123) 9867 
'(ID ARGS FUNCTION PTREE) "Define a ptree node with identifier `id', which is some unique
object suitable for `eql' comparison such as symbol.

The ids of its child nodes are elements of the list `args'.

`function' is the function associated with this node. The arguments
passed to `function' are the respective results of the child node
computations.

`ptree' is the ptree instance in which the node is being defined.")
(SYSTEM:FSET 'PTREE-COMPUTED-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 125) 
11077 '(ID PTREE) "Return true if the node with identifier `id' in `ptree' has
finished computing, otherwise return false.")
(SYSTEM:FSET 'CALL-PTREE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 126) 11387 
'(ID PTREE) "Return the computation result of the node with identifier `id' in
`ptree'.

If the node is uncomputed, compute the result.

If the node is already computed, return the computed result.")
(SYSTEM:FSET '#1=PTREE (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
127)) 11991 '(DEFS &BODY BODY))
