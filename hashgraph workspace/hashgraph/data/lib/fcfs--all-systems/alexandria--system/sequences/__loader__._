"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/alexandria-20130128-git/sequences.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-7489 #:ENVIRONMENT-7490 #:G7488 #:G7487 #:WHOLE-7533 #:ENVIRONMENT-7534 #:G7532 #:G7531 #:G7665 #:G7666))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.sequences_tmp3FH8G05Q"))
(SYSTEM:%IN-PACKAGE "ALEXANDRIA")
(PROCLAIM '(INLINE COPY-SEQUENCE SEQUENCE-OF-LENGTH-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=SEQUENCE-OF-LENGTH-P) '(LAMBDA (#2=SEQUENCE #3=LENGTH) 
(DECLARE (TYPE ARRAY-INDEX #3# ) (INLINE #3# ) (OPTIMIZE SPEED)) (BLOCK #1#  (ETYPECASE 
#2#  (#4=NULL (ZEROP #3# )) (CONS (#5=LET ((#6=N (1- #3# ))) (UNLESS (MINUSP #6# ) 
(#5#  ((#7=TAIL (NTHCDR #6#  #2# ))) (AND #7#  (#4#  (CDR #7# ))))))) (VECTOR (#8== 
#3#  (#3#  #2# ))) (#2#  (#8#  #3#  (#3#  #2# )))))))
(SYSTEM:FSET 'SEQUENCE-OF-LENGTH-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
0) 305 '(SEQUENCE LENGTH) "Return true if SEQUENCE is a sequence of length LENGTH. Signals an error if
SEQUENCE is not a sequence. Returns FALSE for circular lists.")
(SYSTEM:FSET 'ROTATE-TAIL-TO-HEAD (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1) 905 '(SEQUENCE N) #1=NIL)
(SYSTEM:FSET 'ROTATE-HEAD-TO-TAIL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
2) 1498 '(SEQUENCE N) #1=NIL)
(SYSTEM:FSET 'ROTATE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 3) 2116 '(SEQUENCE 
&OPTIONAL (N 1)) "Returns a sequence of the same type as SEQUENCE, with the elements of
SEQUENCE rotated by N: N elements are moved from the end of the sequence to
the front if N is positive, and -N elements moved from the front to the end if
N is negative. SEQUENCE must be a proper sequence. N must be an integer,
defaulting to 1.

If absolute value of N is greater then the length of the sequence, the results
are identical to calling ROTATE with

  (* (signum n) (mod n (length sequence))).

Note: the original sequence may be destructively altered, and result sequence may
share structure with it.")
(SYSTEM:FSET 'SHUFFLE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 4) 2892 '(SEQUENCE 
&KEY (START 0) END) "Returns a random permutation of SEQUENCE bounded by START and END.
Original sequece may be destructively modified, and share storage with
the original one. Signals an error if SEQUENCE is not a proper
sequence.")
(SYSTEM:FSET 'RANDOM-ELT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 5) 3944 
'(SEQUENCE &KEY (START 0) END) "Returns a random element from SEQUENCE bounded by START and END. Signals an
error if the SEQUENCE is not a proper non-empty sequence, or if END and START
are not proper bounding index designators for SEQUENCE.")
(PROCLAIM '(INLINE REMOVE/SWAPPED-ARGUMENTS))
(SETF (SYSTEM:INLINE-EXPANSION 'REMOVE/SWAPPED-ARGUMENTS) '#1=NIL)
(SYSTEM:FSET 'REMOVE/SWAPPED-ARGUMENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
6) 5259 '(SEQUENCE ITEM &REST KEYWORD-ARGUMENTS) #1=NIL)
(SYSTEM:FSET '#1=REMOVEF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
7)) 5383 '(#2? ITEM &REST REMOVE-KEYWORDS &ENVIRONMENT #3?))
(PROCLAIM '(INLINE DELETE/SWAPPED-ARGUMENTS))
(SETF (SYSTEM:INLINE-EXPANSION 'DELETE/SWAPPED-ARGUMENTS) '#1=NIL)
(SYSTEM:FSET 'DELETE/SWAPPED-ARGUMENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
8) 5663 '(SEQUENCE ITEM &REST KEYWORD-ARGUMENTS) #1=NIL)
(SYSTEM:FSET '#1=DELETEF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
9)) 5787 '(#6? ITEM &REST REMOVE-KEYWORDS &ENVIRONMENT #7?))
(DEFTYPE PROPER-SEQUENCE #1=NIL "Type designator for proper sequences, that is proper lists and sequences
that are not lists." '(OR PROPER-LIST (AND (NOT LIST) SEQUENCE)))
(SYSTEM:FSET 'EMPTYP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 10) 6202 '(SEQUENCE) 
"Returns true if SEQUENCE is an empty sequence. Signals an error if SEQUENCE
is not a sequence.")
(SYSTEM:FSET 'LENGTH= (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 11) 6419 '(&REST 
SEQUENCES) "Takes any number of sequences or integers in any order. Returns true iff
the length of all the sequences and the integers are equal. Hint: there's a
compiler macro that expands into more efficient code if the first argument
is a literal integer.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 12))
(SETF (SYSTEM:INLINE-EXPANSION '#1=COPY-SEQUENCE) '(LAMBDA (#2=TYPE #3=SEQUENCE) 
(BLOCK #1#  (IF (TYPEP #3#  #2# ) (COPY-SEQ #3# ) (COERCE #3#  #2# )))))
(SYSTEM:FSET 'COPY-SEQUENCE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 14) 8631 
'(TYPE SEQUENCE) "Returns a fresh sequence of TYPE, which has the same elements as
SEQUENCE.")
(SYSTEM:FSET 'FIRST-ELT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 15) 8833 
'(SEQUENCE) "Returns the first element of SEQUENCE. Signals a type-error if SEQUENCE is
not a sequence, or is an empty sequence.")
(SYSTEM:FSET '(SETF FIRST-ELT) (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 16) 
9389 '(OBJECT SEQUENCE) "Sets the first element of SEQUENCE. Signals a type-error if SEQUENCE is
not a sequence, is an empty sequence, or if OBJECT cannot be stored in SEQUENCE.")
(SYSTEM:FSET 'LAST-ELT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 17) 10030 
'(SEQUENCE) "Returns the last element of SEQUENCE. Signals a type-error if SEQUENCE is
not a proper sequence, or is an empty sequence.")
(SYSTEM:FSET '(SETF LAST-ELT) (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 18) 
10646 '(OBJECT SEQUENCE) "Sets the last element of SEQUENCE. Signals a type-error if SEQUENCE is not a proper
sequence, is an empty sequence, or if OBJECT cannot be stored in SEQUENCE.")
(SYSTEM:FSET 'STARTS-WITH-SUBSEQ (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
19) 11252 '(PREFIX SEQUENCE &REST ARGS &KEY (RETURN-SUFFIX #1=NIL) &ALLOW-OTHER-KEYS) 
"Test whether the first elements of SEQUENCE are the same (as per TEST) as the elements of PREFIX.

If RETURN-SUFFIX is T the functions returns, as a second value, a
displaced array pointing to the sequence after PREFIX.")
(SYSTEM:FSET 'ENDS-WITH-SUBSEQ (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 20) 
12542 '(SUFFIX SEQUENCE &KEY (TEST (FUNCTION EQL))) "Test whether SEQUENCE ends with SUFFIX. In other words: return true if
the last (length SUFFIX) elements of SEQUENCE are equal to SUFFIX.")
(SYSTEM:FSET 'STARTS-WITH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 21) 13314 
'(OBJECT SEQUENCE &KEY (TEST (#1=FUNCTION EQL)) (KEY (#1#  IDENTITY))) "Returns true if SEQUENCE is a sequence whose first element is EQL to OBJECT.
Returns NIL if the SEQUENCE is not a sequence or is an empty sequence.")
(SYSTEM:FSET 'ENDS-WITH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 22) 13951 
'(OBJECT SEQUENCE &KEY (TEST (#1=FUNCTION EQL)) (KEY (#1#  IDENTITY))) "Returns true if SEQUENCE is a sequence whose last element is EQL to OBJECT.
Returns NIL if the SEQUENCE is not a sequence or is an empty sequence. Signals
an error if SEQUENCE is an improper list.")
(SYSTEM:FSET 'MAP-COMBINATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 23) 
14882 '(FUNCTION SEQUENCE &KEY (START 0) END LENGTH (COPY T)) "Calls FUNCTION with each combination of LENGTH constructable from the
elements of the subsequence of SEQUENCE delimited by START and END. START
defaults to 0, END to length of SEQUENCE, and LENGTH to the length of the
delimited subsequence. (So unless LENGTH is specified there is only a single
combination, which has the same elements as the delimited subsequence.) If
COPY is true (the default) each combination is freshly allocated. If COPY is
false all combinations are EQ to each other, in which case consequences are
specified if a combination is modified by FUNCTION.")
(SYSTEM:FSET 'MAP-PERMUTATIONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 28) 
17509 '(FUNCTION SEQUENCE &KEY (START 0) END LENGTH (COPY T)) "Calls function with each permutation of LENGTH constructable
from the subsequence of SEQUENCE delimited by START and END. START
defaults to 0, END to length of the sequence, and LENGTH to the
length of the delimited subsequence.")
(SYSTEM:FSET 'MAP-DERANGEMENTS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 32) 
19471 '(FUNCTION SEQUENCE &KEY (START 0) END (COPY T)) "Calls FUNCTION with each derangement of the subsequence of SEQUENCE denoted
by the bounding index designators START and END. Derangement is a permutation
of the sequence where no element remains in place. SEQUENCE is not modified,
but individual derangements are EQ to each other. Consequences are unspecified
if calling FUNCTION modifies either the derangement or SEQUENCE.")
(PROCLAIM '(NOTINLINE SEQUENCE-OF-LENGTH-P))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 34))
(MOP::ENSURE-METHOD 'PRINT-OBJECT :LAMBDA-LIST '(CONDITION STREAM) :QUALIFIERS '#1=NIL 
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'NO-EXTREMUM 'T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 35))
(SYSTEM:FSET 'EXTREMUM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 41) 21775 
'(SEQUENCE PREDICATE &KEY KEY (START 0) END) "Returns the element of SEQUENCE that would appear first if the subsequence
bounded by START and END was sorted using PREDICATE and KEY.

EXTREMUM determines the relationship between two elements of SEQUENCE by using
the PREDICATE function. PREDICATE should return true if and only if the first
argument is strictly less than the second one (in some appropriate sense). Two
arguments X and Y are considered to be equal if (FUNCALL PREDICATE X Y)
and (FUNCALL PREDICATE Y X) are both false.

The arguments to the PREDICATE function are computed from elements of SEQUENCE
using the KEY function, if supplied. If KEY is not supplied or is NIL, the
sequence element itself is used.

If SEQUENCE is empty, NIL is returned.")
