"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/alexandria-20130128-git/lists.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-5053 #:ENV-5054 #:KEYWORDS-5055 #:SUPPLIEDP-5056 #:KEY-PROBLEM-5057 #:INFO-5058 #:WHOLE-5076 #:ENV-5077 #:KEYWORDS-5078 #:SUPPLIEDP-5079 #:KEY-PROBLEM-5080 #:INFO-5081 #:WHOLE-5094 #:ENVIRONMENT-5095 #:WHOLE-5151 #:ENVIRONMENT-5152 #:G5150 #:G5149 #:WHOLE-5186 #:ENVIRONMENT-5187 #:G5185 #:G5184 #:WHOLE-5221 #:ENVIRONMENT-5222 #:G5220 #:G5219 #:WHOLE-5256 #:ENVIRONMENT-5257 #:G5255 #:G5254 #:WHOLE-5291 #:ENVIRONMENT-5292 #:G5290 #:G5289 #:WHOLE-5334 #:ENVIRONMENT-5335 #:G5333 #:G5332 #:WHOLE-5752 #:ENVIRONMENT-5753 #:G5751 #:G5750 #:WHOLE-5787 #:ENVIRONMENT-5788 #:G5786 #:G5785))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.lists_tmpZDCBGTG6"))
(SYSTEM:%IN-PACKAGE "ALEXANDRIA")
(PROCLAIM '(INLINE SAFE-ENDP))
(SETF (SYSTEM:INLINE-EXPANSION '#1=SAFE-ENDP) '(LAMBDA (#2=X) (DECLARE (OPTIMIZE 
SAFETY)) (BLOCK #1#  (ENDP #2# ))))
(SYSTEM:FSET 'SAFE-ENDP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 0) 55 '(X) 
#1=NIL)
(SYSTEM:FSET 'ALIST-PLIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1) 118 
'(ALIST) "Returns a property list containing the same keys and values as the
association list ALIST in the same order.")
(SYSTEM:FSET 'PLIST-ALIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 2) 383 
'(PLIST) "Returns an association list containing the same keys and values as the
property list PLIST in the same order.")
(PROCLAIM '(INLINE RACONS))
(SETF (SYSTEM:INLINE-EXPANSION '#1=RACONS) '(LAMBDA (#2=KEY #3=VALUE #4=RALIST) (BLOCK 
#1#  (ACONS #3#  #2#  #4# ))))
(SYSTEM:FSET 'RACONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 3) 698 '(KEY 
VALUE RALIST) #1=NIL)
(PROCLAIM '(INLINE ASSOC-VALUE))
(SETF (SYSTEM:INLINE-EXPANSION 'ASSOC-VALUE) '#1=NIL)
(SYSTEM:FSET 'ASSOC-VALUE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 4) 759 
'(ALIST KEY &KEY (TEST 'EQL)) "ASSOC-VALUE is an alist accessor very much like ASSOC, but it can
be used with SETF.")
(SYSTEM:PUT '#1=ASSOC-VALUE 'SYSTEM::SETF-EXPANDER (FUNCTION (LAMBDA (#2=#0? #3=#1?) 
(#4=BLOCK #1#  (#5=LET* ((#6=ENV #3# ) (#7=#2? (#8=CDR (#8#  (#8#  #2# )))) (#9=#3? 
(SYSTEM::KEYWORD-SUPPLIED-P '#10=:TEST #7# ))) (DECLARE (IGNORABLE #7# )) (#11=MULTIPLE-VALUE-BIND 
(#12=#4? #13=#5?) (SYSTEM::VERIFY-KEYWORDS #7#  '(#10# ) '#14=NIL) (#15=WHEN #12#  
(#16=ERROR 'PROGRAM-ERROR "Unrecognized keyword argument ~S" (#17=CAR #13# )))) (#5#  
((#18=PLACE (#17#  (#8#  #2# ))) (#19=KEY (#17#  (#8#  (#8#  #2# )))) (#20=TEST (IF 
#9#  (SYSTEM::LOOKUP-KEYWORD '#10#  #7# ) ''EQL))) (#4#  #1#  (#11#  (#21=TEMPORARY-VARIABLES 
#22=INITFORMS #23=NEWVALS #24=SETTER #25=GETTER) (GET-SETF-EXPANSION #18#  #6# ) 
(#15#  (#8#  #23# ) (#16#  "~A cannot store multiple values in one place" '#1# )) 
(#26=LET ((#27=NEW-VALUE (#28=GENSYM "NEW-VALUE")) (#29=KEY-VAL (#28#  "KEY-VAL")) 
(#30=TEST-VAL (#28#  "TEST-VAL")) (#31=ALIST (#28#  "ALIST")) (#32=ENTRY (#28#  "ENTRY"))) 
(VALUES (#33=APPEND #21#  (#34=LIST #31#  #29#  #30#  #32# )) (#33#  #22#  (#34#  
#25#  #19#  #20#  (#35=SYSTEM::BACKQ-LIST 'ASSOC #29#  #31#  '#10#  #30# ))) (#35#  
#27# ) (#35#  'COND (#35#  #32#  (#35#  '#36=SETF (#35#  '#8#  #32# ) #27# )) (#35#  
'T (#35#  '#26#  #23#  (#35#  '#36#  (FIRST #23# ) (#35#  'ACONS #19#  #27#  #31# )) 
#24#  #27# ))) (#35#  '#8#  #32# )))))))))))
(PROCLAIM '(INLINE RASSOC-VALUE))
(SETF (SYSTEM:INLINE-EXPANSION 'RASSOC-VALUE) '#1=NIL)
(SYSTEM:FSET 'RASSOC-VALUE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 5) 759 
'(ALIST KEY &KEY (TEST 'EQL)) "RASSOC-VALUE is an alist accessor very much like RASSOC, but it can
be used with SETF.")
(SYSTEM:PUT '#1=RASSOC-VALUE 'SYSTEM::SETF-EXPANDER (FUNCTION (LAMBDA (#2=#6? #3=#7?) 
(#4=BLOCK #1#  (#5=LET* ((#6=ENV #3# ) (#7=#8? (#8=CDR (#8#  (#8#  #2# )))) (#9=#9? 
(SYSTEM::KEYWORD-SUPPLIED-P '#10=:TEST #7# ))) (DECLARE (IGNORABLE #7# )) (#11=MULTIPLE-VALUE-BIND 
(#12=#10? #13=#11?) (SYSTEM::VERIFY-KEYWORDS #7#  '(#10# ) '#14=NIL) (#15=WHEN #12#  
(#16=ERROR 'PROGRAM-ERROR "Unrecognized keyword argument ~S" (#17=CAR #13# )))) (#5#  
((#18=PLACE (#17#  (#8#  #2# ))) (#19=KEY (#17#  (#8#  (#8#  #2# )))) (#20=TEST (IF 
#9#  (SYSTEM::LOOKUP-KEYWORD '#10#  #7# ) ''EQL))) (#4#  #1#  (#11#  (#21=TEMPORARY-VARIABLES 
#22=INITFORMS #23=NEWVALS #24=SETTER #25=GETTER) (GET-SETF-EXPANSION #18#  #6# ) 
(#15#  (#8#  #23# ) (#16#  "~A cannot store multiple values in one place" '#1# )) 
(#26=LET ((#27=NEW-VALUE (#28=GENSYM "NEW-VALUE")) (#29=KEY-VAL (#28#  "KEY-VAL")) 
(#30=TEST-VAL (#28#  "TEST-VAL")) (#31=ALIST (#28#  "ALIST")) (#32=ENTRY (#28#  "ENTRY"))) 
(VALUES (#33=APPEND #21#  (#34=LIST #31#  #29#  #30#  #32# )) (#33#  #22#  (#34#  
#25#  #19#  #20#  (#35=SYSTEM::BACKQ-LIST 'RASSOC #29#  #31#  '#10#  #30# ))) (#35#  
#27# ) (#35#  'COND (#35#  #32#  (#35#  '#36=SETF (#35#  '#17#  #32# ) #27# )) (#35#  
'T (#35#  '#26#  #23#  (#35#  '#36#  (FIRST #23# ) (#35#  'RACONS #19#  #27#  #31# )) 
#24#  #27# ))) (#35#  '#17#  #32# )))))))))))
(SYSTEM:FSET 'MALFORMED-PLIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 6) 
2687 '(PLIST) #1=NIL)
(SYSTEM:FSET '#1=DOPLIST (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
7)) 2758 '((KEY VAL PLIST &OPTIONAL VALUES) &BODY BODY))
(SYSTEM:FSET '#1=APPENDF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
8)) 3988 '(#16? &REST LISTS &ENVIRONMENT #17?))
(SYSTEM:FSET '#1=NCONCF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
9)) 4130 '(#20? &REST LISTS &ENVIRONMENT #21?))
(SYSTEM:FSET '#1=UNIONF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
10)) 4270 '(#24? LIST &REST ARGS &ENVIRONMENT #25?))
(SYSTEM:FSET '#1=NUNIONF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
11)) 4464 '(#28? LIST &REST ARGS &ENVIRONMENT #29?))
(SYSTEM:FSET '#1=REVERSEF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
12)) 4689 '(#32? &ENVIRONMENT #33?))
(SYSTEM:FSET '#1=NREVERSEF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
13)) 4859 '(#36? &ENVIRONMENT #37?))
(SYSTEM:FSET 'CIRCULAR-LIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 14) 5051 
'(&REST ELEMENTS) "Creates a circular list of ELEMENTS.")
(SYSTEM:FSET 'CIRCULAR-LIST-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 15) 
5195 '(OBJECT) "Returns true if OBJECT is a circular list, NIL otherwise.")
(SYSTEM:FSET 'CIRCULAR-TREE-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 16) 
5567 '(OBJECT) "Returns true if OBJECT is a circular tree, NIL otherwise.")
(SYSTEM:FSET 'PROPER-LIST-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 18) 6395 
'(OBJECT) "Returns true if OBJECT is a proper list.")
(DEFTYPE PROPER-LIST #1=NIL "Type designator for proper lists. Implemented as a SATISFIES type, hence
not recommended for performance intensive use. Main usefullness as a type
designator of the expected type in a TYPE-ERROR." '(AND LIST (SATISFIES PROPER-LIST-P)))
(SYSTEM:FSET 'CIRCULAR-LIST-ERROR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
19) 7124 '(LIST) #1=NIL)
(SYSTEM:FSET 'PROPER-LIST-LENGTH (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
20) 7259 '(LIST) "Returns length of LIST, signalling an error if it is not a proper list.")
(SYSTEM:FSET 'LASTCAR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 21) 7259 '(LIST) 
"Returns the last element of LIST. Signals a type-error if LIST is not a
proper list.")
(SYSTEM:FSET '(SETF LASTCAR) (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 22) 
7259 '(OBJECT LIST) "Sets the last element of LIST. Signals a type-error if LIST is not a proper
list.")
(SYSTEM:FSET 'MAKE-CIRCULAR-LIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
23) 8755 '(LENGTH &KEY INITIAL-ELEMENT) "Creates a circular list of LENGTH with the given INITIAL-ELEMENT.")
(DEFTYPE CIRCULAR-LIST #1=NIL "Type designator for circular lists. Implemented as a SATISFIES type, so not
recommended for performance intensive use. Main usefullness as the
expected-type designator of a TYPE-ERROR." '(SATISFIES CIRCULAR-LIST-P))
(SYSTEM:FSET 'ENSURE-CAR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 24) 9225 
'(THING) "If THING is a CONS, its CAR is returned. Otherwise THING is returned.")
(SYSTEM:FSET 'ENSURE-CONS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 25) 9378 
'(CONS) "If CONS is a cons, it is returned. Otherwise returns a fresh cons with CONS
  in the car, and NIL in the cdr.")
(SYSTEM:FSET 'ENSURE-LIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 26) 9573 
'(LIST) "If LIST is a list, it is returned. Otherwise returns the list designated by LIST.")
(SYSTEM:FSET 'REMOVE-FROM-PLIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 27) 
9736 '(PLIST &REST KEYS) "Returns a propery-list with same keys and values as PLIST, except that keys
in the list designated by KEYS and values corresponding to them are removed.
The returned property-list may share structure with the PLIST, but PLIST is
not destructively modified. Keys are compared using EQ.")
(SYSTEM:FSET 'DELETE-FROM-PLIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 28) 
10440 '(PLIST &REST KEYS) "Just like REMOVE-FROM-PLIST, but this version may destructively modify the
provided plist.")
(SYSTEM:FSET '#1=REMOVE-FROM-PLISTF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 29)) 10649 '(#40? &REST KEYS &ENVIRONMENT #41?))
(SYSTEM:FSET '#1=DELETE-FROM-PLISTF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 30)) 10781 '(#44? &REST KEYS &ENVIRONMENT #45?))
(PROCLAIM '(INLINE SANS))
(SETF (SYSTEM:INLINE-EXPANSION 'SANS) '#1=NIL)
(SYSTEM:FSET 'SANS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 31) 10937 '(PLIST 
&REST KEYS) "Alias of REMOVE-FROM-PLIST for backward compatibility.")
(SYSTEM:FSET 'MAPPEND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 32) 11069 '(FUNCTION 
&REST LISTS) "Applies FUNCTION to respective element(s) of each LIST, appending all the
all the result list to a single list. FUNCTION must return a list.")
(SYSTEM:FSET 'SETP (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 33) 11333 '(OBJECT 
&KEY (TEST (#1=FUNCTION EQL)) (KEY (#1#  IDENTITY))) "Returns true if OBJECT is a list that denotes a set, NIL otherwise. A list
denotes a set if each element of the list is unique under KEY and TEST.")
(SYSTEM:FSET 'SET-EQUAL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 34) 11771 
'(LIST1 LIST2 &KEY (TEST (FUNCTION EQL)) (KEY #1=NIL KEYP)) "Returns true if every element of LIST1 matches some element of LIST2 and
every element of LIST2 matches some element of LIST1. Otherwise returns false.")
(SYSTEM:FSET 'MAP-PRODUCT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 35) 12328 
'(FUNCTION LIST &REST MORE-LISTS) "Returns a list containing the results of calling FUNCTION with one argument
from LIST, and one from each of MORE-LISTS for each combination of arguments.
In other words, returns the product of LIST and MORE-LISTS using FUNCTION.

Example:

 (map-product 'list '(1 2) '(3 4) '(5 6))
  => ((1 3 5) (1 3 6) (1 4 5) (1 4 6)
      (2 3 5) (2 3 6) (2 4 5) (2 4 6))
")
(SYSTEM:FSET 'FLATTEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 39) 13131 '(TREE) 
"Traverses the tree in order, collecting non-null leaves into a list.")
