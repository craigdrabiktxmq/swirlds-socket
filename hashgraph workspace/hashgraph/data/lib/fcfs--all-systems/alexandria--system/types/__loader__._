"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/alexandria-20130128-git/types.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:G6778 #:G6779 #:WHOLE-6842 #:ENVIRONMENT-6843 #:G6841 #:G6840))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.types_tmpAGN2KURT"))
(SYSTEM:%IN-PACKAGE "ALEXANDRIA")
(DEFTYPE ARRAY-INDEX (&OPTIONAL (#1=LENGTH ARRAY-DIMENSION-LIMIT)) "Type designator for an index into array of LENGTH: an integer between
0 (inclusive) and LENGTH (exclusive). LENGTH defaults to
ARRAY-DIMENSION-LIMIT." (#2=SYSTEM::BACKQ-LIST 'INTEGER 0 (#2#  #1# )))
(DEFTYPE ARRAY-LENGTH (&OPTIONAL (#1=LENGTH ARRAY-DIMENSION-LIMIT)) "Type designator for a dimension of an array of LENGTH: an integer between
0 (inclusive) and LENGTH (inclusive). LENGTH defaults to
ARRAY-DIMENSION-LIMIT." (SYSTEM::BACKQ-LIST 'INTEGER 0 #1# ))
(DEFTYPE NEGATIVE-FIXNUM #1=NIL "Type specifier denoting the fixnum range from MOST-NEGATIVE-FIXNUM to -1." 
(SYSTEM::BACKQ-LIST* 'INTEGER MOST-NEGATIVE-FIXNUM '(-1)))
(DEFTYPE NON-POSITIVE-FIXNUM #1=NIL "Type specifier denoting the fixnum range from MOST-NEGATIVE-FIXNUM to 0." 
(SYSTEM::BACKQ-LIST* 'INTEGER MOST-NEGATIVE-FIXNUM '(0)))
(DEFTYPE NON-NEGATIVE-FIXNUM #1=NIL "Type specifier denoting the fixnum range from 0 to MOST-POSITIVE-FIXNUM." 
(SYSTEM::BACKQ-LIST 'INTEGER '0 MOST-POSITIVE-FIXNUM))
(DEFTYPE POSITIVE-FIXNUM #1=NIL "Type specifier denoting the fixnum range from 1 to MOST-POSITIVE-FIXNUM." 
(SYSTEM::BACKQ-LIST 'INTEGER '1 MOST-POSITIVE-FIXNUM))
(PROCLAIM '(INLINE POSITIVE-FIXNUM-P NON-NEGATIVE-FIXNUM-P NON-POSITIVE-FIXNUM-P 
NEGATIVE-FIXNUM-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-FIXNUM-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'FIXNUM) (< #2#  0)))))
(SYSTEM:FSET 'NEGATIVE-FIXNUM-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 0) 
518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-FIXNUM-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'FIXNUM) (<= #2#  0)))))
(SYSTEM:FSET 'NON-POSITIVE-FIXNUM-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-FIXNUM-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'FIXNUM) (<= 0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-FIXNUM-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
2) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-FIXNUM-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'FIXNUM) (< 0 #2# )))))
(SYSTEM:FSET 'POSITIVE-FIXNUM-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 3) 
518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-INTEGER #1=NIL "Type specifier denoting the integer range from -inf to -1." 
(SYSTEM::BACKQ-LIST* 'INTEGER '* '(-1)))
(DEFTYPE NON-POSITIVE-INTEGER #1=NIL "Type specifier denoting the integer range from -inf to 0." 
(SYSTEM::BACKQ-LIST* 'INTEGER '* '(0)))
(DEFTYPE NON-NEGATIVE-INTEGER #1=NIL "Type specifier denoting the integer range from 0 to +inf." 
(SYSTEM::BACKQ-LIST 'INTEGER '0 '*))
(DEFTYPE POSITIVE-INTEGER #1=NIL "Type specifier denoting the integer range from 1 to +inf." 
(SYSTEM::BACKQ-LIST 'INTEGER '1 '*))
(PROCLAIM '(INLINE POSITIVE-INTEGER-P NON-NEGATIVE-INTEGER-P NON-POSITIVE-INTEGER-P 
NEGATIVE-INTEGER-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-INTEGER-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'INTEGER) (< #2#  0)))))
(SYSTEM:FSET 'NEGATIVE-INTEGER-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
4) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-INTEGER-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'INTEGER) (<= #2#  0)))))
(SYSTEM:FSET 'NON-POSITIVE-INTEGER-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
5) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-INTEGER-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'INTEGER) (<= 0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-INTEGER-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
6) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-INTEGER-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'INTEGER) (< 0 #2# )))))
(SYSTEM:FSET 'POSITIVE-INTEGER-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
7) 518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-RATIONAL #1=NIL "Type specifier denoting the rational range from -inf to 0." 
(SYSTEM::BACKQ-LIST* 'RATIONAL '* '((0))))
(DEFTYPE NON-POSITIVE-RATIONAL #1=NIL "Type specifier denoting the rational range from -inf to 0." 
(SYSTEM::BACKQ-LIST* 'RATIONAL '* '(0)))
(DEFTYPE NON-NEGATIVE-RATIONAL #1=NIL "Type specifier denoting the rational range from 0 to +inf." 
(SYSTEM::BACKQ-LIST 'RATIONAL '0 '*))
(DEFTYPE POSITIVE-RATIONAL #1=NIL "Type specifier denoting the rational range from 0 to +inf." 
(SYSTEM::BACKQ-LIST 'RATIONAL '(0) '*))
(PROCLAIM '(INLINE POSITIVE-RATIONAL-P NON-NEGATIVE-RATIONAL-P NON-POSITIVE-RATIONAL-P 
NEGATIVE-RATIONAL-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-RATIONAL-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'RATIONAL) (< #2#  0)))))
(SYSTEM:FSET 'NEGATIVE-RATIONAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
8) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-RATIONAL-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'RATIONAL) (<= #2#  0)))))
(SYSTEM:FSET 'NON-POSITIVE-RATIONAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
9) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-RATIONAL-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'RATIONAL) (<= 0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-RATIONAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
10) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-RATIONAL-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'RATIONAL) (< 0 #2# )))))
(SYSTEM:FSET 'POSITIVE-RATIONAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
11) 518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-REAL #1=NIL "Type specifier denoting the real range from -inf to 0." 
(SYSTEM::BACKQ-LIST* 'REAL '* '((0))))
(DEFTYPE NON-POSITIVE-REAL #1=NIL "Type specifier denoting the real range from -inf to 0." 
(SYSTEM::BACKQ-LIST* 'REAL '* '(0)))
(DEFTYPE NON-NEGATIVE-REAL #1=NIL "Type specifier denoting the real range from 0 to +inf." 
(SYSTEM::BACKQ-LIST 'REAL '0 '*))
(DEFTYPE POSITIVE-REAL #1=NIL "Type specifier denoting the real range from 0 to +inf." 
(SYSTEM::BACKQ-LIST 'REAL '(0) '*))
(PROCLAIM '(INLINE POSITIVE-REAL-P NON-NEGATIVE-REAL-P NON-POSITIVE-REAL-P NEGATIVE-REAL-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-REAL-P) '(LAMBDA (#2=N) (BLOCK #1#  (AND 
(TYPEP #2#  'REAL) (< #2#  0)))))
(SYSTEM:FSET 'NEGATIVE-REAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 12) 
518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-REAL-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'REAL) (<= #2#  0)))))
(SYSTEM:FSET 'NON-POSITIVE-REAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
13) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-REAL-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'REAL) (<= 0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-REAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
14) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-REAL-P) '(LAMBDA (#2=N) (BLOCK #1#  (AND 
(TYPEP #2#  'REAL) (< 0 #2# )))))
(SYSTEM:FSET 'POSITIVE-REAL-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 15) 
518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-FLOAT #1=NIL "Type specifier denoting the float range from -inf to 0.0." 
(SYSTEM::BACKQ-LIST* 'FLOAT '* '((0.0f0))))
(DEFTYPE NON-POSITIVE-FLOAT #1=NIL "Type specifier denoting the float range from -inf to 0.0." 
(SYSTEM::BACKQ-LIST* 'FLOAT '* '(0.0f0)))
(DEFTYPE NON-NEGATIVE-FLOAT #1=NIL "Type specifier denoting the float range from 0.0 to +inf." 
(SYSTEM::BACKQ-LIST 'FLOAT '0.0f0 '*))
(DEFTYPE POSITIVE-FLOAT #1=NIL "Type specifier denoting the float range from 0.0 to +inf." 
(SYSTEM::BACKQ-LIST 'FLOAT '(0.0f0) '*))
(PROCLAIM '(INLINE POSITIVE-FLOAT-P NON-NEGATIVE-FLOAT-P NON-POSITIVE-FLOAT-P NEGATIVE-FLOAT-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'FLOAT) (< #2#  0.0f0)))))
(SYSTEM:FSET 'NEGATIVE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 16) 
518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'FLOAT) (<= #2#  0.0f0)))))
(SYSTEM:FSET 'NON-POSITIVE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
17) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'FLOAT) (<= 0.0f0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
18) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK #1#  
(AND (TYPEP #2#  'FLOAT) (< 0.0f0 #2# )))))
(SYSTEM:FSET 'POSITIVE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 19) 
518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-SHORT-FLOAT #1=NIL "Type specifier denoting the short-float range from -inf to 0.0." 
(SYSTEM::BACKQ-LIST* 'SHORT-FLOAT '* '((0.0f0))))
(DEFTYPE NON-POSITIVE-SHORT-FLOAT #1=NIL "Type specifier denoting the short-float range from -inf to 0.0." 
(SYSTEM::BACKQ-LIST* 'SHORT-FLOAT '* '(0.0f0)))
(DEFTYPE NON-NEGATIVE-SHORT-FLOAT #1=NIL "Type specifier denoting the short-float range from 0.0 to +inf." 
(SYSTEM::BACKQ-LIST 'SHORT-FLOAT '0.0f0 '*))
(DEFTYPE POSITIVE-SHORT-FLOAT #1=NIL "Type specifier denoting the short-float range from 0.0 to +inf." 
(SYSTEM::BACKQ-LIST 'SHORT-FLOAT '(0.0f0) '*))
(PROCLAIM '(INLINE POSITIVE-SHORT-FLOAT-P NON-NEGATIVE-SHORT-FLOAT-P NON-POSITIVE-SHORT-FLOAT-P 
NEGATIVE-SHORT-FLOAT-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-SHORT-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SHORT-FLOAT) (< #2#  0.0f0)))))
(SYSTEM:FSET 'NEGATIVE-SHORT-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
20) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-SHORT-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SHORT-FLOAT) (<= #2#  0.0f0)))))
(SYSTEM:FSET 'NON-POSITIVE-SHORT-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
21) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-SHORT-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SHORT-FLOAT) (<= 0.0f0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-SHORT-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
22) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-SHORT-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SHORT-FLOAT) (< 0.0f0 #2# )))))
(SYSTEM:FSET 'POSITIVE-SHORT-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
23) 518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-SINGLE-FLOAT #1=NIL "Type specifier denoting the single-float range from -inf to 0.0." 
(SYSTEM::BACKQ-LIST* 'SINGLE-FLOAT '* '((0.0f0))))
(DEFTYPE NON-POSITIVE-SINGLE-FLOAT #1=NIL "Type specifier denoting the single-float range from -inf to 0.0." 
(SYSTEM::BACKQ-LIST* 'SINGLE-FLOAT '* '(0.0f0)))
(DEFTYPE NON-NEGATIVE-SINGLE-FLOAT #1=NIL "Type specifier denoting the single-float range from 0.0 to +inf." 
(SYSTEM::BACKQ-LIST 'SINGLE-FLOAT '0.0f0 '*))
(DEFTYPE POSITIVE-SINGLE-FLOAT #1=NIL "Type specifier denoting the single-float range from 0.0 to +inf." 
(SYSTEM::BACKQ-LIST 'SINGLE-FLOAT '(0.0f0) '*))
(PROCLAIM '(INLINE POSITIVE-SINGLE-FLOAT-P NON-NEGATIVE-SINGLE-FLOAT-P NON-POSITIVE-SINGLE-FLOAT-P 
NEGATIVE-SINGLE-FLOAT-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-SINGLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SINGLE-FLOAT) (< #2#  0.0f0)))))
(SYSTEM:FSET 'NEGATIVE-SINGLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
24) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-SINGLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SINGLE-FLOAT) (<= #2#  0.0f0)))))
(SYSTEM:FSET 'NON-POSITIVE-SINGLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
25) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-SINGLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SINGLE-FLOAT) (<= 0.0f0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-SINGLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
26) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-SINGLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'SINGLE-FLOAT) (< 0.0f0 #2# )))))
(SYSTEM:FSET 'POSITIVE-SINGLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
27) 518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-DOUBLE-FLOAT #1=NIL "Type specifier denoting the double-float range from -inf to 0.0d0." 
(SYSTEM::BACKQ-LIST* 'DOUBLE-FLOAT '* '((0.0d0))))
(DEFTYPE NON-POSITIVE-DOUBLE-FLOAT #1=NIL "Type specifier denoting the double-float range from -inf to 0.0d0." 
(SYSTEM::BACKQ-LIST* 'DOUBLE-FLOAT '* '(0.0d0)))
(DEFTYPE NON-NEGATIVE-DOUBLE-FLOAT #1=NIL "Type specifier denoting the double-float range from 0.0d0 to +inf." 
(SYSTEM::BACKQ-LIST 'DOUBLE-FLOAT '0.0d0 '*))
(DEFTYPE POSITIVE-DOUBLE-FLOAT #1=NIL "Type specifier denoting the double-float range from 0.0d0 to +inf." 
(SYSTEM::BACKQ-LIST 'DOUBLE-FLOAT '(0.0d0) '*))
(PROCLAIM '(INLINE POSITIVE-DOUBLE-FLOAT-P NON-NEGATIVE-DOUBLE-FLOAT-P NON-POSITIVE-DOUBLE-FLOAT-P 
NEGATIVE-DOUBLE-FLOAT-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-DOUBLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'DOUBLE-FLOAT) (< #2#  0.0d0)))))
(SYSTEM:FSET 'NEGATIVE-DOUBLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
28) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-DOUBLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'DOUBLE-FLOAT) (<= #2#  0.0d0)))))
(SYSTEM:FSET 'NON-POSITIVE-DOUBLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
29) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-DOUBLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'DOUBLE-FLOAT) (<= 0.0d0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-DOUBLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
30) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-DOUBLE-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'DOUBLE-FLOAT) (< 0.0d0 #2# )))))
(SYSTEM:FSET 'POSITIVE-DOUBLE-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
31) 518 '(N) #1=NIL)
(DEFTYPE NEGATIVE-LONG-FLOAT #1=NIL "Type specifier denoting the long-float range from -inf to 0.0d0." 
(SYSTEM::BACKQ-LIST* 'LONG-FLOAT '* '((0.0d0))))
(DEFTYPE NON-POSITIVE-LONG-FLOAT #1=NIL "Type specifier denoting the long-float range from -inf to 0.0d0." 
(SYSTEM::BACKQ-LIST* 'LONG-FLOAT '* '(0.0d0)))
(DEFTYPE NON-NEGATIVE-LONG-FLOAT #1=NIL "Type specifier denoting the long-float range from 0.0d0 to +inf." 
(SYSTEM::BACKQ-LIST 'LONG-FLOAT '0.0d0 '*))
(DEFTYPE POSITIVE-LONG-FLOAT #1=NIL "Type specifier denoting the long-float range from 0.0d0 to +inf." 
(SYSTEM::BACKQ-LIST 'LONG-FLOAT '(0.0d0) '*))
(PROCLAIM '(INLINE POSITIVE-LONG-FLOAT-P NON-NEGATIVE-LONG-FLOAT-P NON-POSITIVE-LONG-FLOAT-P 
NEGATIVE-LONG-FLOAT-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEGATIVE-LONG-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'LONG-FLOAT) (< #2#  0.0d0)))))
(SYSTEM:FSET 'NEGATIVE-LONG-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
32) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-POSITIVE-LONG-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'LONG-FLOAT) (<= #2#  0.0d0)))))
(SYSTEM:FSET 'NON-POSITIVE-LONG-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
33) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=NON-NEGATIVE-LONG-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'LONG-FLOAT) (<= 0.0d0 #2# )))))
(SYSTEM:FSET 'NON-NEGATIVE-LONG-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
34) 518 '(N) #1=NIL)
(SETF (SYSTEM:INLINE-EXPANSION '#1=POSITIVE-LONG-FLOAT-P) '(LAMBDA (#2=N) (BLOCK 
#1#  (AND (TYPEP #2#  'LONG-FLOAT) (< 0.0d0 #2# )))))
(SYSTEM:FSET 'POSITIVE-LONG-FLOAT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
35) 518 '(N) #1=NIL)
(SYSTEM:FSET 'OF-TYPE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 36) 4677 '(TYPE) 
"Returns a function of one argument, which returns true when its argument is
of TYPE.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 38))
(PROCLAIM '(INLINE TYPE=))
(SETF (SYSTEM:INLINE-EXPANSION '#1=TYPE=) '(LAMBDA (#2=TYPE1 #3=TYPE2) (BLOCK #1#  
(#4=MULTIPLE-VALUE-BIND (#5=SUB #6=OK) (#7=SUBTYPEP #2#  #3# ) (COND ((AND #6#  #5# ) 
(#7#  #3#  #2# )) (#6#  (#8=VALUES #9=NIL #6# )) (T (#4#  (#5#  #6# ) (#7#  #3#  
#2# ) (DECLARE (IGNORE #5# )) (#8#  #9#  #6# ))))))))
(SYSTEM:FSET 'TYPE= (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 40) 5169 '(TYPE1 
TYPE2) "Returns a primary value of T is TYPE1 and TYPE2 are the same type,
and a secondary value that is true is the type equality could be reliably
determined: primary value of NIL and secondary value of T indicates that the
types are not equivalent.")
(SYSTEM:FSET '#1=COERCEF (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
41)) 5747 '(#4? TYPE-SPEC &ENVIRONMENT #5?))
