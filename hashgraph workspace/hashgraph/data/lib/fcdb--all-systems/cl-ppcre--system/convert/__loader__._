"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/cl-ppcre-2.0.4/convert.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-36937 #:ENVIRONMENT-36938 #:WHOLE-36955 #:ENVIRONMENT-36956 #:WHOLE-36973 #:ENVIRONMENT-36974))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.convert_tmp19K8PU38"))
(SYSTEM:%IN-PACKAGE "CL-PPCRE")
(SYSTEM:FSET '#1=CASE-INSENSITIVE-MODE-P (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 0)) 1698 '(FLAGS))
(SYSTEM:FSET '#1=MULTI-LINE-MODE-P (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1)) 2006 '(FLAGS))
(SYSTEM:FSET '#1=SINGLE-LINE-MODE-P (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 2)) 2143 '(FLAGS))
(SYSTEM:FSET 'SET-FLAG (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 3) 2279 '(TOKEN) 
"Reads a flag token and sets or unsets the corresponding entry in
the special FLAGS list.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 4))
(SYSTEM:FSET 'CONVERT-CHAR-CLASS-TO-TEST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
11) 3421 '(LIST INVERTEDP CASE-INSENSITIVE-P) "Combines all items in LIST into test function and returns a
logical-OR combination of these functions.  Items can be single
characters, character ranges like (:RANGE #\\A #\\E), or special
character classes like :DIGIT-CLASS.  Does the right thing with
respect to case-(in)sensitivity as specified by the special variable
FLAGS.")
(SYSTEM:FSET 'MAYBE-SPLIT-REPETITION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
20) 8603 '(REGEX GREEDYP MINIMUM MAXIMUM MIN-LEN LENGTH REG-SEEN) "Splits a REPETITION object into a constant and a varying part if
applicable, i.e. something like
  a{3,} -> a{3}a*
The arguments to this function correspond to the REPETITION slots of
the same name.")
(SYSTEM:FSET 'MAYBE-ACCUMULATE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 21) 
11625 '(STR) "Accumulate STR into the special variable STARTS-WITH if
ACCUMULATE-START-P (also special) is true and STARTS-WITH is either
NIL or a STR object of the same case mode. Always returns NIL.")
(PROCLAIM '(INLINE CONVERT-AUX))
(SETF (SYSTEM:INLINE-EXPANSION '#1=CONVERT-AUX) '(LAMBDA (#2=PARSE-TREE) (DECLARE 
(OPTIMIZE SPEED (SAFETY #3=0) (SPACE #3# ) (DEBUG 1) (COMPILATION-SPEED #3# ))) (BLOCK 
#1#  (IF (CONSP #2# ) (CONVERT-COMPOUND-PARSE-TREE (FIRST #2# ) #2# ) (CONVERT-SIMPLE-PARSE-TREE 
#2# )))))
(SYSTEM:FSET 'CONVERT-AUX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 22) 14497 
'(PARSE-TREE) "Converts the parse tree PARSE-TREE into a REGEX object and returns
it.  Will also

  - split and optimize repetitions,
  - accumulate strings or EVERYTHING objects into the special variable
    STARTS-WITH,
  - keep track of all registers seen in the special variable REG-NUM,
  - keep track of all named registers seen in the special variable REG-NAMES
  - keep track of the highest backreference seen in the special
    variable MAX-BACK-REF,
  - maintain and adher to the currently applicable modifiers in the special
    variable FLAGS, and
  - maybe even wash your car...")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 23))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :SEQUENCE) 'T)) :DOCUMENTATION "The case for parse trees like (:SEQUENCE {<regex>}*)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 26))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :GROUP) 'T)) :DOCUMENTATION "The case for parse trees like (:GROUP {<regex>}*).

This is a syntactical construct equivalent to :SEQUENCE intended to
keep the effect of modifiers local." :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
28))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :ALTERNATION) 'T)) :DOCUMENTATION "The case for (:ALTERNATION {<regex>}*)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 30))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :BRANCH) 'T)) :DOCUMENTATION "The case for (:BRANCH <test> <regex>).

Here, <test> must be look-ahead, look-behind or number; if <regex> is
an alternation it must have one or two choices." :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 32))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :POSITIVE-LOOKAHEAD) 'T)) :DOCUMENTATION "The case for (:POSITIVE-LOOKAHEAD <regex>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 34))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :NEGATIVE-LOOKAHEAD) 'T)) :DOCUMENTATION "The case for (:NEGATIVE-LOOKAHEAD <regex>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 36))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :POSITIVE-LOOKBEHIND) 'T)) :DOCUMENTATION "The case for (:POSITIVE-LOOKBEHIND <regex>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 38))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :NEGATIVE-LOOKBEHIND) 'T)) :DOCUMENTATION "The case for (:NEGATIVE-LOOKBEHIND <regex>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 40))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY (GREEDYP #1=T)) :QUALIFIERS '#2=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(#3=LIST (#3#  'EQL :GREEDY-REPETITION) '#1# )) :DOCUMENTATION "The case for (:GREEDY-REPETITION|:NON-GREEDY-REPETITION <min> <max> <regex>).

This function is also used for the non-greedy case in which case it is
called with GREEDYP set to NIL as you would expect." :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 42))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :NON-GREEDY-REPETITION) 'T)) :DOCUMENTATION "The case for (:NON-GREEDY-REPETITION <min> <max> <regex>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 44))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY NAME) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :REGISTER) 'T)) :DOCUMENTATION "The case for (:REGISTER <regex>).  Also used for named registers
when NAME is not NIL." :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
46))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :NAMED-REGISTER) 'T)) :DOCUMENTATION "The case for (:NAMED-REGISTER <regex>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 48))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :FILTER) 'T)) :DOCUMENTATION "The case for (:FILTER <function> &optional <length>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 50))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :STANDALONE) 'T)) :DOCUMENTATION "The case for (:STANDALONE <regex>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 52))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :BACK-REFERENCE) 'T)) :DOCUMENTATION "The case for (:BACK-REFERENCE <number>|<name>)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 54))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :REGEX) 'T)) :DOCUMENTATION "The case for (:REGEX <string>)." :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 57))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY INVERTEDP) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS 
(#2=LIST (#2#  'EQL :CHAR-CLASS) 'T)) :DOCUMENTATION "The case for (:CHAR-CLASS {<item>}*) where item is one of

- a character,
- a character range: (:RANGE <char1> <char2>), or
- a special char class symbol like :DIGIT-CHAR-CLASS.

Also used for inverted char classes when INVERTEDP is true." :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 59))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :INVERTED-CHAR-CLASS) 'T)) :DOCUMENTATION "The case for (:INVERTED-CHAR-CLASS {<item>}*)." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 61))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :PROPERTY) 'T)) :DOCUMENTATION "The case for (:PROPERTY <name>) where <name> is a string." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 63))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :INVERTED-PROPERTY) 'T)) :DOCUMENTATION "The case for (:INVERTED-PROPERTY <name>) where <name> is a string." 
:FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 65))
(MOP::ENSURE-METHOD 'CONVERT-COMPOUND-PARSE-TREE :LAMBDA-LIST '(TOKEN PARSE-TREE 
&KEY) :QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST 
(#2#  'EQL :FLAGS) 'T)) :DOCUMENTATION "The case for (:FLAGS {<flag>}*) where flag is a modifier symbol
like :CASE-INSENSITIVE-P." :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
67))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 69))
(MOP::ENSURE-METHOD 'CONVERT-SIMPLE-PARSE-TREE :LAMBDA-LIST '(PARSE-TREE) :QUALIFIERS 
'#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'STRING)) :FUNCTION (#2=SYSTEM::GET-FASL-FUNCTION 
#3=SYSTEM:*FASL-LOADER* 112) :FAST-FUNCTION (#2#  #3#  113))
(MOP::ENSURE-METHOD 'CONVERT-SIMPLE-PARSE-TREE :LAMBDA-LIST '(PARSE-TREE) :QUALIFIERS 
'#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'CHARACTER)) :FUNCTION 
(#2=SYSTEM::GET-FASL-FUNCTION #3=SYSTEM:*FASL-LOADER* 114) :FAST-FUNCTION (#2#  #3#  
115))
(MOP::ENSURE-METHOD 'CONVERT-SIMPLE-PARSE-TREE :LAMBDA-LIST '(PARSE-TREE) :QUALIFIERS 
'#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'T)) :DOCUMENTATION "The default method - check if there's a translation." 
:FUNCTION (#2=SYSTEM::GET-FASL-FUNCTION #3=SYSTEM:*FASL-LOADER* 116) :FAST-FUNCTION 
(#2#  #3#  117))
(SYSTEM:FSET 'CONVERT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 118) 39241 
'(PARSE-TREE) "Converts the parse tree PARSE-TREE into an equivalent REGEX object
and returns three values: the REGEX object, the number of registers
seen and an object the regex starts with which is either a STR object
or an EVERYTHING object (if the regex starts with something like
\".*\") or NIL.")
