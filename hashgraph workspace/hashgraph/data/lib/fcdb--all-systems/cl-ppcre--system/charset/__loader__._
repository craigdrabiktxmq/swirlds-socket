"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/cl-ppcre-2.0.4/charset.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:CHARSET- #:G29751 #:G29752 #:G29753 #:G29792 #:G29838 #:G29890 #:G29935 #:G29987 #:G30033 #:G30221))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.charset_tmpGJF0CMZF"))
(SYSTEM:%IN-PACKAGE "CL-PPCRE")
(COMMON-LISP:DEFCONSTANT #1=+PROBE-DEPTH+ (IF (BOUNDP '#1# ) (SYMBOL-VALUE '#1# ) 
3) "Maximum number of collisions (for any element) we accept before we
allocate more storage.  This is now fixed, but could be made to vary
depending on the size of the storage vector (e.g. in the range of
1-4).  Larger probe-depths mean more collisions are tolerated before
the table grows, but increase the constant factor.")
(SYSTEM:FSET 'MAKE-CHAR-VECTOR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 0) 
2038 '(SIZE) "Returns a vector of size SIZE to hold characters.  All elements are
initialized to #Null except for the first one which is initialized to
#?.")
(SYSTEM:COMPILER-DEFSTRUCT 'CHARSET :CONC-NAME '#0? :DEFAULT-CONSTRUCTOR '#1=MAKE-CHARSET 
:CONSTRUCTORS '((#1#  #2=NIL)) :COPIER 'COPY-CHARSET :PREDICATE '"CHARSET-P" :DIRECT-SLOTS 
'(#3=#(#4=SYSTEM::DEFSTRUCT-SLOT-DESCRIPTION DEPTH #5=0 CHARSET-DEPTH +PROBE-DEPTH+
 #6=FIXNUM #2# ) #7=#(#4#  COUNT 1 CHARSET-COUNT #5#  #6#  #2# ) #8=#(#4#  VECTOR
 2 CHARSET-VECTOR (MAKE-CHAR-VECTOR 12) (SIMPLE-ARRAY CHARACTER (*)) #2# )) :SLOTS 
'(#3#  #7#  #8# ) :INHERITED-ACCESSORS '#2#  :DOCUMENTATION '#2# )
(SYSTEM:FSET 'MAKE-CHARSET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 1) 2669 
'(&KEY ((:DEPTH #1?) +PROBE-DEPTH+) ((:COUNT #2?) 0) ((:VECTOR #3?) (MAKE-CHAR-VECTOR 
12))) #1=NIL)
(SYSTEM:FSET 'CHARSET-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 2) 2669 '(SYSTEM::OBJECT) 
#1=NIL)
(PROCLAIM '(FTYPE (FUNCTION * FIXNUM) CHARSET-DEPTH))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 3))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 4))
(SYSTEM:PUT 'CHARSET-DEPTH 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 0 
'CHARSET))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 6))
(PROCLAIM '(FTYPE (FUNCTION * FIXNUM) CHARSET-COUNT))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 8))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 9))
(SYSTEM:PUT 'CHARSET-COUNT 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 1 
'CHARSET))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 11))
(PROCLAIM '(FTYPE (FUNCTION #1=* (SIMPLE-ARRAY CHARACTER (#1# ))) CHARSET-VECTOR))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 13))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 14))
(SYSTEM:PUT 'CHARSET-VECTOR 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
2 'CHARSET))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 16))
(SYSTEM::%SET-FDEFINITION 'COPY-CHARSET (FUNCTION COPY-STRUCTURE))
(MOP::ENSURE-METHOD 'MAKE-LOAD-FORM :LAMBDA-LIST '(SET &OPTIONAL ENVIRONMENT) :QUALIFIERS 
'#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'CHARSET)) :FUNCTION 
(SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 18))
(PROCLAIM '(INLINE MIX))
(SETF (SYSTEM:INLINE-EXPANSION '#1=MIX) '(LAMBDA (#2=CODE #3=HASH) (DECLARE (OPTIMIZE 
SPEED (SAFETY #4=0) (SPACE #4# ) (DEBUG 1) (COMPILATION-SPEED #4# ))) (BLOCK #1#  
(SXHASH (LOGAND MOST-POSITIVE-FIXNUM (+ #2#  #3# ))))))
(SYSTEM:FSET 'MIX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 20) 3213 '(CODE 
HASH) "Given a character code CODE and a hash code HASH, computes and
returns the \"next\" hash code.  See comments below.")
(PROCLAIM '(INLINE COMPUTE-INDEX))
(SETF (SYSTEM:INLINE-EXPANSION '#1=COMPUTE-INDEX) '(LAMBDA (#2=HASH #3=VECTOR) (DECLARE 
(OPTIMIZE SPEED (SAFETY #4=0) (SPACE #4# ) (DEBUG 1) (COMPILATION-SPEED #4# ))) (BLOCK 
#1#  (1+ (MOD #2#  (1- (LENGTH #3# )))))))
(SYSTEM:FSET 'COMPUTE-INDEX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 21) 3720 
'(HASH VECTOR) "Computes and returns the index into the vector VECTOR corresponding
to the hash code HASH.")
(SYSTEM:FSET 'IN-CHARSET-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 22) 3933 
'(CHAR SET) "Checks whether the character CHAR is in the charset SET.")
(SYSTEM:FSET 'ADD-TO-CHARSET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 23) 
5654 '(CHAR SET) "Adds the character CHAR to the charset SET, extending SET if
necessary.  Returns CHAR.")
(SYSTEM:FSET '%ADD-TO-CHARSET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 24) 
5954 '(CHAR SET COUNT) "Tries to add the character CHAR to the charset SET without
extending it.  Returns NIL if this fails.  Counts CHAR as new
if COUNT is true and it is added to SET.")
(SYSTEM:FSET '%ADD-TO-CHARSET/EXPAND (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
25) 7456 '(CHAR SET) "Extends the charset SET and then adds the character CHAR to it.")
(SYSTEM:FSET 'MAP-CHARSET (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 27) 9077 
'(FUNCTION CHARSET) "Calls FUNCTION with all characters in SET.  Returns NIL.")
(SYSTEM:FSET 'CREATE-CHARSET-FROM-TEST-FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
28) 9860 '(TEST-FUNCTION START END) "Creates and returns a charset representing all characters with
character codes between START and END which satisfy TEST-FUNCTION.")
