"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/cl-ppcre-2.0.4/api.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:G49564 #:G49565 #:G49632 #:G49633 #:WHOLE-49660 #:ENVIRONMENT-49661 #:WHOLE-49746 #:ENVIRONMENT-49747 #:WHOLE-49822 #:ENVIRONMENT-49823 #:WHOLE-49865 #:ENVIRONMENT-49866 #:WHOLE-49916 #:ENVIRONMENT-49917 #:G50060 #:G50061 #:G50161 #:G50162 #:G50316 #:G50317 #:G50856 #:G50857 #:G50956 #:G50957 #:WHOLE-50985 #:ENVIRONMENT-50986 #:G51139 #:WHOLE-51736 #:ENVIRONMENT-51737))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.api_tmp1DBH94EL"))
(SYSTEM:%IN-PACKAGE "CL-PPCRE")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 0))
(MOP::ENSURE-METHOD 'CREATE-SCANNER :LAMBDA-LIST '(REGEX-STRING &KEY CASE-INSENSITIVE-MODE 
MULTI-LINE-MODE SINGLE-LINE-MODE EXTENDED-MODE DESTRUCTIVE) :QUALIFIERS '#1=NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (LIST 'STRING)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1))
(MOP::ENSURE-METHOD 'CREATE-SCANNER :LAMBDA-LIST '(SCANNER &KEY CASE-INSENSITIVE-MODE 
MULTI-LINE-MODE SINGLE-LINE-MODE EXTENDED-MODE DESTRUCTIVE) :QUALIFIERS '#1=NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (LIST 'FUNCTION)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 3))
(MOP::ENSURE-METHOD 'CREATE-SCANNER :LAMBDA-LIST '(PARSE-TREE &KEY CASE-INSENSITIVE-MODE 
MULTI-LINE-MODE SINGLE-LINE-MODE EXTENDED-MODE DESTRUCTIVE) :QUALIFIERS '#1=NIL :SPECIALIZERS 
(MOP::CANONICALIZE-SPECIALIZERS (LIST 'T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
5))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 7))
(MOP::ENSURE-METHOD 'SCAN :LAMBDA-LIST '(REGEX-STRING #1=TARGET-STRING &KEY (START 
0) (END (LENGTH #1# )) ((:REAL-START-POS *REAL-START-POS*) #2=NIL)) :QUALIFIERS '#2#  
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'STRING 'T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 8))
(MOP::ENSURE-METHOD 'SCAN :LAMBDA-LIST '(SCANNER #1=TARGET-STRING &KEY (START 0) 
(END (LENGTH #1# )) ((:REAL-START-POS *REAL-START-POS*) #2=NIL)) :QUALIFIERS '#2#  
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'FUNCTION 'T)) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 10))
(MOP::ENSURE-METHOD 'SCAN :LAMBDA-LIST '(PARSE-TREE #1=TARGET-STRING &KEY (START 
0) (END (LENGTH #1# )) ((:REAL-START-POS *REAL-START-POS*) #2=NIL)) :QUALIFIERS '#2#  
:SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST '#3=T '#3# )) :FUNCTION (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 12))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 14))
(SYSTEM:FSET 'SCAN-TO-STRINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 16) 
14822 '(REGEX #1=TARGET-STRING &KEY (START 0) (END (LENGTH #1# )) SHAREDP) "Like SCAN but returns substrings of TARGET-STRING instead of
positions, i.e. this function returns two values on success: the whole
match as a string plus an array of substrings (or NILs) corresponding
to the matched registers.  If SHAREDP is true, the substrings may
share structure with TARGET-STRING.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 18))
(SYSTEM:FSET '#1=REGISTER-GROUPS-BIND (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 20)) 16382 '(VAR-LIST (REGEX TARGET-STRING &KEY START END SHAREDP) 
&BODY BODY))
(SYSTEM:FSET '#1=DO-SCANS (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
21)) 18536 '((MATCH-START MATCH-END REG-STARTS REG-ENDS REGEX TARGET-STRING &OPTIONAL 
RESULT-FORM &KEY START END) &BODY BODY &ENVIRONMENT ENV))
(SYSTEM:FSET '#1=DO-MATCHES (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
22)) 21591 '((MATCH-START MATCH-END REGEX TARGET-STRING &OPTIONAL RESULT-FORM &KEY 
START END) &BODY BODY))
(SYSTEM:FSET '#1=DO-MATCHES-AS-STRINGS (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 23)) 22658 '((MATCH-VAR REGEX TARGET-STRING &OPTIONAL RESULT-FORM 
&KEY START END SHAREDP) &BODY BODY))
(SYSTEM:FSET '#1=DO-REGISTER-GROUPS (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 24)) 24016 '(VAR-LIST (REGEX TARGET-STRING &OPTIONAL RESULT-FORM 
&KEY START END SHAREDP) &BODY BODY))
(SYSTEM:FSET 'ALL-MATCHES (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 25) 26338 
'(REGEX #1=TARGET-STRING &KEY (START 0) (END (LENGTH #1# ))) "Returns a list containing the start and end positions of all
matches of REGEX against TARGET-STRING, i.e. if there are N matches
the list contains (* 2 N) elements.  If REGEX matches an empty string
the scan is continued one position behind this match.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 26))
(SYSTEM:FSET 'ALL-MATCHES-AS-STRINGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
28) 27363 '(REGEX #1=TARGET-STRING &KEY (START 0) (END (LENGTH #1# )) SHAREDP) "Returns a list containing all substrings of TARGET-STRING which
match REGEX. If REGEX matches an empty string the scan is continued
one position behind this match. If SHAREDP is true, the substrings may
share structure with TARGET-STRING.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 29))
(SYSTEM:FSET 'SPLIT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 31) 28434 '(REGEX 
#1=TARGET-STRING &KEY (START 0) (END (LENGTH #1# )) LIMIT WITH-REGISTERS-P OMIT-UNMATCHED-P 
SHAREDP) "Matches REGEX against TARGET-STRING as often as possible and
returns a list of the substrings between the matches.  If
WITH-REGISTERS-P is true, substrings corresponding to matched
registers are inserted into the list as well.  If OMIT-UNMATCHED-P is
true, unmatched registers will simply be left out, otherwise they will
show up as NIL.  LIMIT limits the number of elements returned -
registers aren't counted.  If LIMIT is NIL (or 0 which is
equivalent), trailing empty strings are removed from the result list.
If REGEX matches an empty string the scan is continued one position
behind this match.  If SHAREDP is true, the substrings may share
structure with TARGET-STRING.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 32))
(SYSTEM:FSET 'STRING-CASE-MODIFIER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
34) 31852 '(STR FROM TO START END) "Checks whether all words in STR between FROM and TO are upcased,
downcased or capitalized and returns a function which applies a
corresponding case modification to strings.  Returns #'IDENTITY
otherwise, especially if words in the target area extend beyond FROM
or TO.  STR is supposed to be bounded by START and END.  It is assumed
that (<= START FROM TO END).")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 35))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 36))
(MOP::ENSURE-METHOD 'BUILD-REPLACEMENT-TEMPLATE :LAMBDA-LIST '(REPLACEMENT-FUNCTION) 
:QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'FUNCTION)) 
:FUNCTION (#2=SYSTEM::GET-FASL-FUNCTION #3=SYSTEM:*FASL-LOADER* 39) :FAST-FUNCTION 
(#2#  #3#  40))
(MOP::ENSURE-METHOD 'BUILD-REPLACEMENT-TEMPLATE :LAMBDA-LIST '(REPLACEMENT-FUNCTION-SYMBOL) 
:QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (LIST 'SYMBOL)) 
:FUNCTION (#2=SYSTEM::GET-FASL-FUNCTION #3=SYSTEM:*FASL-LOADER* 41) :FAST-FUNCTION 
(#2#  #3#  42))
(MOP::ENSURE-METHOD 'BUILD-REPLACEMENT-TEMPLATE :LAMBDA-LIST '(REPLACEMENT-LIST) 
:QUALIFIERS '#1=NIL :SPECIALIZERS (MOP::CANONICALIZE-SPECIALIZERS (#2=LIST '#2# )) 
:FUNCTION (#3=SYSTEM::GET-FASL-FUNCTION #4=SYSTEM:*FASL-LOADER* 43) :FAST-FUNCTION 
(#3#  #4#  44))
(SYSTEM:FSET 'BUILD-REPLACEMENT (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 45) 
38208 '(REPLACEMENT-TEMPLATE TARGET-STRING START END MATCH-START MATCH-END REG-STARTS 
REG-ENDS SIMPLE-CALLS ELEMENT-TYPE) "Accepts a replacement template and the current values from the
matching process in REGEX-REPLACE or REGEX-REPLACE-ALL and returns the
corresponding string.")
(SYSTEM:FSET 'REPLACE-AUX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 48) 45055 
'(TARGET-STRING REPLACEMENT POS-LIST REG-LIST START END PRESERVE-CASE SIMPLE-CALLS 
ELEMENT-TYPE) "Auxiliary function used by REGEX-REPLACE and REGEX-REPLACE-ALL.
POS-LIST contains a list with the start and end positions of all
matches while REG-LIST contains a list of arrays representing the
corresponding register start and end positions.")
(SYSTEM:FSET 'REGEX-REPLACE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 49) 47461 
'(REGEX #1=TARGET-STRING REPLACEMENT &KEY (START 0) (END (LENGTH #1# )) PRESERVE-CASE 
SIMPLE-CALLS (ELEMENT-TYPE 'CHARACTER)) "Try to match TARGET-STRING between START and END against REGEX and
replace the first match with REPLACEMENT.  Two values are returned;
the modified string, and T if REGEX matched or NIL otherwise.

  REPLACEMENT can be a string which may contain the special substrings
\"\\&\" for the whole match, \"\\`\" for the part of TARGET-STRING
before the match, \"\\'\" for the part of TARGET-STRING after the
match, \"\\N\" or \"\\{N}\" for the Nth register where N is a positive
integer.

  REPLACEMENT can also be a function designator in which case the
match will be replaced with the result of calling the function
designated by REPLACEMENT with the arguments TARGET-STRING, START,
END, MATCH-START, MATCH-END, REG-STARTS, and REG-ENDS. (REG-STARTS and
REG-ENDS are arrays holding the start and end positions of matched
registers or NIL - the meaning of the other arguments should be
obvious.)

  Finally, REPLACEMENT can be a list where each element is a string,
one of the symbols :MATCH, :BEFORE-MATCH, or :AFTER-MATCH -
corresponding to \"\\&\", \"\\`\", and \"\\'\" above -, an integer N -
representing register (1+ N) -, or a function designator.

  If PRESERVE-CASE is true, the replacement will try to preserve the
case (all upper case, all lower case, or capitalized) of the
match. The result will always be a fresh string, even if REGEX doesn't
match.

  ELEMENT-TYPE is the element type of the resulting string.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 50))
(SYSTEM:FSET 'REGEX-REPLACE-ALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 52) 
50148 '(REGEX #1=TARGET-STRING REPLACEMENT &KEY (START 0) (END (LENGTH #1# )) PRESERVE-CASE 
SIMPLE-CALLS (ELEMENT-TYPE 'CHARACTER)) "Try to match TARGET-STRING between START and END against REGEX and
replace all matches with REPLACEMENT.  Two values are returned; the
modified string, and T if REGEX matched or NIL otherwise.

  REPLACEMENT can be a string which may contain the special substrings
\"\\&\" for the whole match, \"\\`\" for the part of TARGET-STRING
before the match, \"\\'\" for the part of TARGET-STRING after the
match, \"\\N\" or \"\\{N}\" for the Nth register where N is a positive
integer.

  REPLACEMENT can also be a function designator in which case the
match will be replaced with the result of calling the function
designated by REPLACEMENT with the arguments TARGET-STRING, START,
END, MATCH-START, MATCH-END, REG-STARTS, and REG-ENDS. (REG-STARTS and
REG-ENDS are arrays holding the start and end positions of matched
registers or NIL - the meaning of the other arguments should be
obvious.)

  Finally, REPLACEMENT can be a list where each element is a string,
one of the symbols :MATCH, :BEFORE-MATCH, or :AFTER-MATCH -
corresponding to \"\\&\", \"\\`\", and \"\\'\" above -, an integer N -
representing register (1+ N) -, or a function designator.

  If PRESERVE-CASE is true, the replacement will try to preserve the
case (all upper case, all lower case, or capitalized) of the
match. The result will always be a fresh string, even if REGEX doesn't
match.

  ELEMENT-TYPE is the element type of the resulting string.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 53))
(SYSTEM:FSET '#1=REGEX-APROPOS-AUX (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 55)) 53062 '((REGEX PACKAGES CASE-INSENSITIVE &OPTIONAL RETURN-FORM) 
&BODY BODY))
(SYSTEM:FSET 'REGEX-APROPOS-LIST (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
56) 54431 '(REGEX &OPTIONAL PACKAGES &KEY (CASE-INSENSITIVE T)) "Similar to the standard function APROPOS-LIST but returns a list of
all symbols which match the regular expression REGEX.  If
CASE-INSENSITIVE is true and REGEX isn't already a scanner, a
case-insensitive scanner is used.")
(SYSTEM:FSET 'PRINT-SYMBOL-INFO (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 57) 
56563 '(SYMBOL) "Auxiliary function used by REGEX-APROPOS. Tries to print some
meaningful information about a symbol.")
(SYSTEM:FSET 'REGEX-APROPOS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 66) 58562 
'(REGEX &OPTIONAL PACKAGES &KEY (CASE-INSENSITIVE T)) "Similar to the standard function APROPOS but returns a list of all
symbols which match the regular expression REGEX.  If CASE-INSENSITIVE
is true and REGEX isn't already a scanner, a case-insensitive scanner
is used.")
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 67))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 69))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 72))
(SYSTEM:FSET 'PARSE-TREE-SYNONYM (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
75) 61847 '(SYMBOL) "Returns the parse tree the SYMBOL symbol is a synonym for.  Returns
NIL is SYMBOL wasn't yet defined to be a synonym.")
(SYSTEM:FSET '(SETF PARSE-TREE-SYNONYM) (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
76) 62041 '(NEW-PARSE-TREE SYMBOL) "Defines SYMBOL to be a synonm for the parse tree NEW-PARSE-TREE.")
(SYSTEM:FSET '#1=DEFINE-PARSE-TREE-SYNONYM (SYSTEM:MAKE-MACRO '#1#  (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 77)) 62226 '(NAME PARSE-TREE))
