"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 42)
(SETQ SYSTEM:*SOURCE* #P"/Volumes/vibhu/quicklisp/dists/quicklisp/software/cl-ppcre-2.0.4/lexer.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:LEXER- #:G31282 #:G31283 #:G31284 #:G31285 #:G31286 #:G31325 #:G31378 #:G31430 #:G31476 #:G31527 #:G31573 #:G31625 #:G31670))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.lexer_tmp3QKSB74O"))
(SYSTEM:%IN-PACKAGE "CL-PPCRE")
(PROCLAIM '(INLINE MAP-CHAR-TO-SPECIAL-CLASS))
(SYSTEM:FSET 'MAP-CHAR-TO-SPECIAL-CHAR-CLASS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
0) 1963 '(CHR) "Maps escaped characters like \"\\d\" to the tokens which represent
their associated character classes.")
(SYSTEM:COMPILER-DEFSTRUCT 'LEXER :CONC-NAME '#0? :DEFAULT-CONSTRUCTOR '#1=MAKE-LEXER-INTERNAL 
:CONSTRUCTORS '((#1#  #2=NIL)) :COPIER 'COPY-LEXER :PREDICATE '"LEXER-P" :DIRECT-SLOTS 
'(#3=#(#4=SYSTEM::DEFSTRUCT-SLOT-DESCRIPTION STR #5=0 LEXER-STR "" STRING #6=T) #7=#(#4# 
 LEN 1 LEXER-LEN #5#  #8=FIXNUM #6# ) #9=#(#4#  REG 2 LEXER-REG #5#  #8#  #2# ) #10=#(#4# 
 POS 3 LEXER-POS #5#  #8#  #2# ) #11=#(#4#  LAST-POS 4 LEXER-LAST-POS #2#  LIST #2# )) 
:SLOTS '(#3#  #7#  #9#  #10#  #11# ) :INHERITED-ACCESSORS '#2#  :DOCUMENTATION '"LEXER structures are used to hold the regex string which is
currently lexed and to keep track of the lexer's state.")
(SYSTEM:FSET 'MAKE-LEXER-INTERNAL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
1) 2397 '(&KEY ((:STR #1?) "") ((:LEN #2?) #1=0) ((:REG #3?) #1# ) ((:POS #4?) #1# ) 
((:LAST-POS #5?) #2=NIL)) #2# )
(SYSTEM:FSET 'LEXER-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 2) 2397 '(SYSTEM::OBJECT) 
#1=NIL)
(PROCLAIM '(FTYPE (FUNCTION * STRING) LEXER-STR))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 3))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 4))
(PROCLAIM '(FTYPE (FUNCTION * FIXNUM) LEXER-LEN))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 6))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 7))
(PROCLAIM '(FTYPE (FUNCTION * FIXNUM) LEXER-REG))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 9))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 10))
(SYSTEM:PUT 'LEXER-REG 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 2 'LEXER))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 12))
(PROCLAIM '(FTYPE (FUNCTION * FIXNUM) LEXER-POS))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 14))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 15))
(SYSTEM:PUT 'LEXER-POS 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 3 'LEXER))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 17))
(PROCLAIM '(FTYPE (FUNCTION * LIST) LEXER-LAST-POS))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 19))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 20))
(SYSTEM:PUT 'LEXER-LAST-POS 'SYSTEM:SETF-FUNCTION (SYSTEM::MAKE-STRUCTURE-WRITER 
4 'LEXER))
(FUNCALL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 22))
(SYSTEM::%SET-FDEFINITION 'COPY-LEXER (FUNCTION COPY-STRUCTURE))
(SYSTEM:FSET 'MAKE-LEXER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 24) 2720 
'(STRING) #1=NIL)
(PROCLAIM '(INLINE END-OF-STRING-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=END-OF-STRING-P) '(LAMBDA (#2=LEXER) (DECLARE 
(OPTIMIZE SPEED (SAFETY #3=0) (SPACE #3# ) (DEBUG 1) (COMPILATION-SPEED #3# ))) (BLOCK 
#1#  (<= (LEXER-LEN #2# ) (LEXER-POS #2# )))))
(SYSTEM:FSET 'END-OF-STRING-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 25) 
2975 '(LEXER) "Tests whether we're at the end of the regex string.")
(PROCLAIM '(INLINE LOOKING-AT-P))
(SETF (SYSTEM:INLINE-EXPANSION '#1=LOOKING-AT-P) '(LAMBDA (#2=LEXER #3=CHR) (DECLARE 
(OPTIMIZE SPEED (SAFETY #4=0) (SPACE #4# ) (DEBUG 1) (COMPILATION-SPEED #4# ))) (BLOCK 
#1#  (AND (NOT (END-OF-STRING-P #2# )) (CHAR= (SCHAR (LEXER-STR #2# ) (LEXER-POS 
#2# )) #3# )))))
(SYSTEM:FSET 'LOOKING-AT-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 26) 3188 
'(LEXER CHR) "Tests whether the next character the lexer would see is CHR.
Does not respect extended mode.")
(PROCLAIM '(INLINE NEXT-CHAR-NON-EXTENDED))
(SETF (SYSTEM:INLINE-EXPANSION '#1=NEXT-CHAR-NON-EXTENDED) '(LAMBDA (#2=LEXER) (DECLARE 
(OPTIMIZE SPEED (SAFETY #3=0) (SPACE #3# ) (DEBUG 1) (COMPILATION-SPEED #3# ))) (BLOCK 
#1#  (COND ((END-OF-STRING-P #2# ) #4=NIL) (T (PROG1 (SCHAR (LEXER-STR #2# ) (#5=LEXER-POS 
#2# )) (INCF (#5#  #2# ))))))))
(SYSTEM:FSET 'NEXT-CHAR-NON-EXTENDED (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
27) 3519 '(LEXER) "Returns the next character which is to be examined and updates the
POS slot. Does not respect extended mode.")
(SYSTEM:FSET 'NEXT-CHAR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 28) 3870 
'(LEXER) "Returns the next character which is to be examined and updates the
POS slot. Respects extended mode, i.e.  whitespace, comments, and also
nested comments are skipped if applicable.")
(PROCLAIM '(INLINE FAIL))
(#1=SETF (SYSTEM:INLINE-EXPANSION '#2=FAIL) '(LAMBDA (#3=LEXER) (DECLARE (OPTIMIZE 
SPEED (SAFETY #4=0) (SPACE #4# ) (DEBUG 1) (COMPILATION-SPEED #4# ))) (BLOCK #2#  
(UNLESS (#5=LEXER-LAST-POS #3# ) (SIGNAL-SYNTAX-ERROR "LAST-POS stack of LEXER ~A is empty." 
#3# )) (#1#  (LEXER-POS #3# ) (POP (#5#  #3# ))) #6=NIL)))
(SYSTEM:FSET 'FAIL (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 29) 7031 '(LEXER) 
"Moves (LEXER-POS LEXER) back to the last position stored in
(LEXER-LAST-POS LEXER) and pops the LAST-POS stack.")
(SYSTEM:FSET 'GET-NUMBER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 30) 7379 
'(LEXER &KEY (RADIX 10) MAX-LENGTH NO-WHITESPACE-P) "Read and consume the number the lexer is currently looking at and
return it. Returns NIL if no number could be identified.
RADIX is used as in PARSE-INTEGER. If MAX-LENGTH is not NIL we'll read
at most the next MAX-LENGTH characters. If NO-WHITESPACE-P is not NIL
we don't tolerate whitespace in front of the number.")
(PROCLAIM '(INLINE TRY-NUMBER))
(SETF (SYSTEM:INLINE-EXPANSION 'TRY-NUMBER) '#1=NIL)
(SYSTEM:FSET 'TRY-NUMBER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 31) 8791 
'(LEXER &KEY (RADIX 10) MAX-LENGTH NO-WHITESPACE-P) "Like GET-NUMBER but won't consume anything if no number is seen.")
(PROCLAIM '(INLINE MAKE-CHAR-FROM-CODE))
(SETF (SYSTEM:INLINE-EXPANSION '#1=MAKE-CHAR-FROM-CODE) '(LAMBDA (#2=NUMBER #3=ERROR-POS) 
(DECLARE (OPTIMIZE SPEED (SAFETY #4=0) (SPACE #4# ) (DEBUG 1) (COMPILATION-SPEED 
#4# ))) (BLOCK #1#  (LET ((#5=CODE (LOGAND 255 (THE FIXNUM (#6=OR #2#  #4# ))))) 
(#6#  (AND (< #5#  CHAR-CODE-LIMIT) (CODE-CHAR #5# )) (SIGNAL-SYNTAX-ERROR* #3#  
"No character for hex-code ~X." #2# ))))))
(SYSTEM:FSET 'MAKE-CHAR-FROM-CODE (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
32) 9314 '(NUMBER ERROR-POS) "Create character from char-code NUMBER. NUMBER can be NIL
which is interpreted as 0. ERROR-POS is the position where
the corresponding number started within the regex string.")
(SYSTEM:FSET 'UNESCAPE-CHAR (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 33) 9855 
'(LEXER) "Convert the characters(s) following a backslash into a token
which is returned. This function is to be called when the backslash
has already been consumed. Special character classes like \\W are
handled elsewhere.")
(SYSTEM:FSET 'READ-CHAR-PROPERTY (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
34) 11984 '(LEXER FIRST-CHAR) #1=NIL)
(SYSTEM:FSET 'COLLECT-CHAR-CLASS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
35) 12772 '(LEXER) "Reads and consumes characters from regex string until a right
bracket is seen.  Assembles them into a list (which is returned) of
characters, character ranges, like (:RANGE #\\A #\\E) for a-e, and
tokens representing special character classes.")
(SYSTEM:FSET 'MAYBE-PARSE-FLAGS (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 37) 
17284 '(LEXER) "Reads a sequence of modifiers (including #\\- to reverse their
meaning) and returns a corresponding list of \"flag\" tokens.  The
\"x\" modifier is treated specially in that it dynamically modifies
the behaviour of the lexer itself via the special variable
*EXTENDED-MODE-P*.")
(SYSTEM:FSET 'GET-QUANTIFIER (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 38) 
18735 '(LEXER) "Returns a list of two values (min max) if what the lexer is looking
at can be interpreted as a quantifier. Otherwise returns NIL and
resets the lexer to its old position.")
(SYSTEM:FSET 'PARSE-REGISTER-NAME-AUX (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
39) 20644 '(LEXER) "Reads and returns the name in a named register group.  It is
assumed that the starting #< character has already been read.  The
closing #> will also be consumed.")
(SYSTEM:FSET 'GET-TOKEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 41) 21817 
'(LEXER) "Returns and consumes the next token from the regex string (or NIL).")
(PROCLAIM '(INLINE UNGET-TOKEN))
(#1=SETF (SYSTEM:INLINE-EXPANSION '#2=UNGET-TOKEN) '(LAMBDA (#3=LEXER) (DECLARE (OPTIMIZE 
SPEED (SAFETY #4=0) (SPACE #4# ) (DEBUG 1) (COMPILATION-SPEED #4# ))) (BLOCK #2#  
(IF (#5=LEXER-LAST-POS #3# ) (#1#  (LEXER-POS #3# ) (POP (#5#  #3# ))) (ERROR "No token to unget (this should not happen)")))))
(SYSTEM:FSET 'UNGET-TOKEN (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 42) 32655 
'(LEXER) "Moves the lexer back to the last position stored in the LAST-POS stack.")
(PROCLAIM '(INLINE START-OF-SUBEXPR-P))
(#1=SETF (SYSTEM:INLINE-EXPANSION '#2=START-OF-SUBEXPR-P) '(LAMBDA (#3=LEXER) (DECLARE 
(OPTIMIZE SPEED (SAFETY #4=0) (SPACE #4# ) (DEBUG 1) (COMPILATION-SPEED #4# ))) (BLOCK 
#2#  (LET* ((#5=POS (#6=LEXER-POS #3# )) (#7=NEXT-CHAR (#7#  #3# ))) (NOT (OR (NULL 
#7# ) (PROG1 (MEMBER (THE CHARACTER #7# ) '(#\) #\|) :TEST (FUNCTION CHAR=)) (#1#  
(#6#  #3# ) #5# ))))))))
(SYSTEM:FSET 'START-OF-SUBEXPR-P (SYSTEM::GET-FASL-FUNCTION SYSTEM:*FASL-LOADER* 
43) 32999 '(LEXER) "Tests whether the next token can start a valid sub-expression, i.e.
a stand-alone regex.")
